//
// +-------------------------------------------------------------------------+
// |     This file is generated by The Interactive Disassembler (IDA)        |
// |     Copyright (c) 2007 by DataRescue sa/nv, <ida@datarescue.com>        |
// | Licensed to: Paul Ashton - Blue Lane Technologies (1-user Advanced 03/2006) |
// +-------------------------------------------------------------------------+
//
//
//      This file should be used in the following way:
//         - reload executable into IDA with using switch -c
//         - use File, Load IDC file and load this file.
//
//      NOTE: This file doesn't contain all information from the database.
//

#define UNLOADED_FILE   1
#include <idc.idc>

static main(void) {
        GenInfo();              // various settings
        Segments();             // segmentation
        Enums();                // enumerations
        Structures();           // structure types
        Bytes();                // individual bytes (code,data)
        Functions();            // function definitions
        SegRegs();              // segment register values
}

//------------------------------------------------------------------------
// General information

static GenInfo(void) {

        DeleteAll();    // purge database
	SetPrcsr("z80");
	StringStp(0xA);
	Tabs(1);
	Comments(0);
	Voids(0);
	XrefShow(200);
	AutoShow(1);
	Indent(16);
	CmtIndent(40);
	TailDepth(0x10);
}

//------------------------------------------------------------------------
// Information about segmentation

static Segments(void) {
	SetSelector(0X1,0X0);
	;
	SegCreate(0X0,0X2000,0X0,0,1,2);
	SegRename(0X0,"RAM");
	SegClass (0X0,"");
	SegCreate(0X4000,0X5FFF,0X0,0,1,2);
	SegRename(0X4000,"YM");
	SegClass (0X4000,"");
	SegCreate(0X6000,0X60FF,0X0,0,1,2);
	SegRename(0X6000,"BAR");
	SegClass (0X6000,"");
	SegCreate(0X7F00,0X7FFF,0X0,0,1,2);
	SegRename(0X7F00,"VDP");
	SegClass (0X7F00,"");
	SegCreate(0X8000,0XFFFF,0X0,0,1,2);
	SegRename(0X8000,"BANK");
	SegClass (0X8000,"");
	LowVoids(0x0);
	HighVoids(0xFFFF);
}

//------------------------------------------------------------------------
// Information about enum types

static Enums(void) {
        auto id;
}

//------------------------------------------------------------------------
// Information about structure types

static Structures(void) {
        auto id;
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_0(void) {
        auto x;
#define id x

	MakeComm	(0X0,	"disable interrupts : synchronisation is just based on YM Timer");
	MakeCode	(0X0);
	MakeName	(0X0,	"init");
	MakeRptCmt	(0X1,	"initialize stack pointer");
	MakeCode	(x=0X1);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X4,	"apparently the smart way to clear 8-bit accumulator a");
	MakeRptCmt	(0X8,	"I've no idea of the initial purpose of those two bytes, but they absolutely have no influence on the driver's execution with this initialization");
	MakeRptCmt	(0XE,	"init music level at max");
	MakeRptCmt	(0X13,	"init timer value without sending it to YM");
	MakeRptCmt	(0X18,	"init fade in parameters : no fade in");
	MakeRptCmt	(0X1B,	"load music $20, which is void");
	MakeRptCmt	(0X1D,	"process new operation $20 to initialize YM and PSG with void data");
	MakeRptCmt	(0X20,	"init loaded bank, and enter the driver's main loop !");
	MakeComm	(0X23,	"get YM status");
	MakeName	(0X23,	"Main_Loop");
	MakeRptCmt	(0X26,	"check YM Timer. Docs say it's Timer A, but the rest of the code uses Timer B. Error in docs, I assume.");
	MakeRptCmt	(0X28,	"jump as long as there is no timer overflow");
	MakeRptCmt	(0X2A,	"call this subroutine at YM Timer overflow to update the sound data for everything else than DAC");
	MakeRptCmt	(0X30,	"loop parameter is dynamically changed to adjust time period of a DAC sound");
	MakeCode	(0X30);
	MakeName	(0X30,	"Dac_Loop");
	MakeComm	(0X32,	"loop b times before checking things to do");
	MakeRptCmt	(0X37,	"check first if there is a new operation to process");
	MakeRptCmt	(0X3E,	"check if there is a new DAC sample to play");
	MakeRptCmt	(0X42,	"check remaining sound length");
	MakeRptCmt	(0X44,	"if remaining length = 0, then it's end of DAC sample, or it's because sample $FE has been loaded at initialization");
	MakeRptCmt	(0X46,	"YM Register : DAC data");
	MakeRptCmt	(0X48,	"get next DAC sample byte. It's 8-bit PCM");
	MakeRptCmt	(0X4F,	"loop as long as YM busy");
	MakeRptCmt	(0X56,	"transmit DAC Data");
	MakeRptCmt	(0X59,	"decrement remaining sound length to play");
	MakeRptCmt	(0X5A,	"End of the driver's main loop !");
	MakeComm	(0X5D,	"mutes sound at reception of operation $FF");
	MakeCode	(0X5D);
	MakeName	(0X5D,	"Mute_Sound");
	MakeRptCmt	(0X60,	"clear");
	MakeRptCmt	(0X66,	"set Total Level to smallest amplitude");
	MakeRptCmt	(0X69,	"4 loops, one for each operator of the 3 channels");
	MakeRptCmt	(0X80,	"set Total Level to smallest amplitude");
	MakeRptCmt	(0X83,	"4 loops, one for each operator of 3 channels");
	MakeCode	(x=0X95);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X9A,	"set PSG channel 1 volume to 0");
	MakeRptCmt	(0X9D,	"set PSG channel 2 volume to 0");
	MakeRptCmt	(0XA0,	"set PSG channel 3 volume to 0");
	MakeRptCmt	(0XA3,	"set PSG noise channel volume to 0");
	MakeRptCmt	(0XA8,	"loop as long as there is no new operation to process");
	MakeRptCmt	(0XAC,	"if next sent operation is not to mute the sound, go process it in the main loop");
	MakeRptCmt	(0XAE,	"if next sent operation is to mute the sound, then ignore it, and also go back to main loop !");
	MakeName	(0XB2,	"Update_YM_Instruments");
	MakeRptCmt	(0XB8,	"go back to main loop");
	MakeCode	(x=0XBB);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeName	(0XBB,	"YM_UpdateInstrumentsLevels");
	MakeRptCmt	(0XC6,	"get channel data area");
	MakeCode	(x=0XC6);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0XCA,	"get channel level");
	MakeRptCmt	(0XCD,	"reload instrument to load the new level");
	MakeCode	(x=0XD3);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XE0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XF3);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X100);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X10A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X11D);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X130);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X141);
	MakeName	(0X141,	"Update_YM_Level");
	MakeCode	(x=0X143);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X14D,	"b = 1, c = 0");
	MakeCode	(0X14D);
	MakeName	(0X14D,	"LoadBank");
	MakeRptCmt	(0X150,	"save register");
	MakeRptCmt	(0X151,	"save register");
	MakeRptCmt	(0X152,	"get offset containing bank index to use stored on 2 bits -> 4 different banks available");
	MakeCode	(x=0X152);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X155,	"load bank value");
	MakeRptCmt	(0X156,	"keep only bit 0");
	MakeRptCmt	(0X158,	"load bank value again");
	MakeRptCmt	(0X159,	"keep only bit 1");
	MakeRptCmt	(0X15B,	"load bank address register");
	MakeCode	(x=0X15B);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X15E,	"load each bits from a, b, c, d to load one of these 4 possible ROM offsets :");
	MakeRptCmt	(0X15F,	"0x1E0000, or 0x1E8000, or 0x1F0000, or 0x1F8000");
	MakeRptCmt	(0X160,	"1");
	MakeRptCmt	(0X161,	"1");
	MakeRptCmt	(0X162,	"1");
	MakeRptCmt	(0X163,	"1");
	MakeRptCmt	(0X164,	"0");
	MakeRptCmt	(0X165,	"0");
	MakeRptCmt	(0X166,	"0");
	MakeRptCmt	(0X167,	"load saved register");
	MakeRptCmt	(0X168,	"load saved register");
	MakeCode	(0X16A);
	MakeName	(0X16A,	"LoadMusicBank");
	MakeCode	(x=0X16F);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X175,	"load one of the two following ROM chunks in bank :");
	MakeRptCmt	(0X176,	"0x1F0000 or 0x1F8000");
	MakeCode	(0X181);
	MakeName	(0X181,	"LoadInstrumentsBank");
	MakeRptCmt	(0X183,	"b = 1, c = 0");
	MakeRptCmt	(0X186,	"load bank address register");
	MakeCode	(x=0X186);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X189,	"load rom chunk 0x1E8000 in bank");
	MakeCode	(0X195);
	MakeName	(0X195,	"LoadDacSound");
	MakeRptCmt	(0X197,	"if a != FE");
	MakeRptCmt	(0X199,	"if a = FE, play nothing");
	MakeRptCmt	(0X19C,	"0 remaining length, so just stay in the main loop");
	MakeRptCmt	(0X1A0,	"a is DAC sound index, starting at 1, so decrement it");
	MakeCode	(0X1A0);
	MakeRptCmt	(0X1A6,	"hl = 8 * a, so each DAC sound entry uses 8 bytes");
	MakeCode	(x=0X1A7);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X1AA,	"hl now points to the right entry");
	MakeRptCmt	(0X1AB,	"get byte 0 : time period used");
	MakeRptCmt	(0X1AC,	"ignore byte 1 !");
	MakeRptCmt	(0X1AD,	"point to byte 2 : bank to load");
	MakeRptCmt	(0X1AE,	"change loop number to change DAC play time period");
	MakeRptCmt	(0X1B1,	"get byte 2");
	MakeRptCmt	(0X1B2,	"save byte 2");
	MakeRptCmt	(0X1B5,	"ignore byte 3 !");
	MakeRptCmt	(0X1B9,	"de = bytes 5-4 : sound length");
	MakeRptCmt	(0X1BB,	"7th byte");
	MakeRptCmt	(0X1BD,	"8th byte");
	MakeRptCmt	(0X1BE,	"hl = bytes 7-6 : sound data pointer");
	MakeRptCmt	(0X1C0,	"clear to say that DAC sound is now loaded");
	MakeRptCmt	(0X1C3,	"loads bank 0x1E0000 or 0x1E8000");
	MakeComm	(0X1C7,	"main handles any new operation sent by 68K (or Z80 itself)");
	MakeCode	(0X1C7);
	MakeName	(0X1C7,	"Main");
	MakeRptCmt	(0X1C9,	"clear 0x1FFF (its value is already in pushed a)");
	MakeRptCmt	(0X1CF,	"if a = FFh : mute sound");
	MakeRptCmt	(0X1D4,	"if a = FEh : stop music by muting PSG and releasing YM keys");
	MakeRptCmt	(0X1D9,	"if a = FDh : fade out");
	MakeRptCmt	(0X1DE,	"if a = F0h");
	MakeRptCmt	(0X1E3,	"if a = F1h");
	MakeRptCmt	(0X1E8,	"if a > 41h, then play an SFX (already stored in ram along with the code)");
	MakeComm	(0X1EB,	"else, play a music !");
	MakeRptCmt	(0X1F0,	"if a > 21h, then play music from chunk 0x1F0000");
	MakeRptCmt	(0X1F2,	"otherwise play music from 0x1F8000");
	MakeRptCmt	(0X1F4,	"load 01h to 0x152D");
	MakeRptCmt	(0X1F7,	"load rom chunk 0x1F8000 to bank");
	MakeRptCmt	(0X201,	"clear a");
	MakeCode	(0X201);
	MakeRptCmt	(0X205,	"load rom chunk 0x1F0000 to bank");
	MakeRptCmt	(0X20E,	"decrement music/sound index (no $00 entry)");
	MakeRptCmt	(0X20F,	"double index because the pointer table to reach has 2 bytes per entry");
	MakeRptCmt	(0X217,	"now hl contains pointer to music/sound data");
	MakeRptCmt	(0X218,	"get byte 0");
	MakeRptCmt	(0X219,	"check if a = 0 with z flag");
	MakeRptCmt	(0X21A,	"if byte 0 of music data != 0, actually load it as an SFX instead");
	MakeRptCmt	(0X226,	"reset fade in timer");
	MakeRptCmt	(0X229,	"clear that useless byte ... no kidding ! that thing is really used nowhere");
	MakeRptCmt	(0X22C,	"stop currently playing music if there was one");
	MakeRptCmt	(0X230,	"get music data byte 1 : indicates if music uses DAC Samples");
	MakeRptCmt	(0X231,	"so music byte 2 is useless ? I guess it was intended to use YM Timer A first, which needs two data bytes");
	MakeRptCmt	(0X232,	"point to byte 3 : YM Timer B value");
	MakeRptCmt	(0X233,	"indicates if music uses DAC Samples");
	MakeRptCmt	(0X236,	"YM register : Timer B");
	MakeRptCmt	(0X238,	"value to input");
	MakeRptCmt	(0X239,	"set Timer B value");
	MakeRptCmt	(0X23D,	"clear fade out bytes");
	MakeRptCmt	(0X248,	"hl now points to the first of the ten pointers");
	MakeRptCmt	(0X249,	"number of loops");
	MakeRptCmt	(0X24B,	"start of the data to store");
	MakeCode	(x=0X24B);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X24F,	"this part initializes each channel ram data");
	MakeRptCmt	(0X251,	"de = channel data pointer");
	MakeRptCmt	(0X252,	"point to first byte of next pointer");
	MakeRptCmt	(0X256,	"init data pointer");
	MakeRptCmt	(0X259,	"and let me present to you ...");
	MakeRptCmt	(0X25A,	"time counter for note/sample length");
	MakeRptCmt	(0X25D,	"\"channel not in use\" indicator");
	MakeRptCmt	(0X260,	"key release time (release key when time counter 02 reaches this value)");
	MakeRptCmt	(0X263,	"set to $80 when there is no key release");
	MakeRptCmt	(0X269,	"loop A start pointer");
	MakeRptCmt	(0X26C,	"note shift value");
	MakeRptCmt	(0X26F,	"frequency shift value");
	MakeRptCmt	(0X272,	"slide speed");
	MakeRptCmt	(0X277,	"stereo setting");
	MakeRptCmt	(0X280,	"get first pointed data byte");
	MakeRptCmt	(0X285,	"if first byte of channel data = FF, then there is no data for this channel");
	MakeRptCmt	(0X287,	"\"channel not in use\"");
	MakeRptCmt	(0X28F,	"actual loop instruction based on register b");
	MakeRptCmt	(0X291,	"loop two times");
	MakeRptCmt	(0X299,	"activate left and right sound outputs for each channel");
	MakeRptCmt	(0X29C,	"first channel of called YM part");
	MakeCode	(x=0X29C);
	OpChr		(x,	1);
	MakeRptCmt	(0X2A0,	"second channel");
	MakeRptCmt	(0X2A4,	"third channel");
	MakeRptCmt	(0X2AA,	"set C0h for byte 1E of YM channels 4,5,6");
	MakeRptCmt	(0X2B5,	"put value FE as DAC Sound sample to load ... which loads nothing. Why such a thing then ?");
	MakeRptCmt	(0X2BD,	"end of the loadSFX and loadMusic chunks");
	MakeRptCmt	(0X2C2,	"looks like the part to play SFX");
	MakeCode	(0X2C2);
	MakeRptCmt	(0X2C9,	"a is an index, and you double it to access to a pointer table");
	MakeRptCmt	(0X2CA,	"SFX are actually already stored in RAM");
	MakeCode	(x=0X2CA);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X2D0,	"get the proper pointer");
	MakeRptCmt	(0X2D2,	"get pointed byte 0");
	MakeRptCmt	(0X2D3,	"hl points to byte 1 of sfx data");
	MakeRptCmt	(0X2D6,	"if a != 1 (then a = 2, which means the sound just concerns 3 channels)");
	MakeRptCmt	(0X2D8,	"loop 10 times");
	MakeCode	(x=0X2DA);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X2DE,	"part to get next channel data");
	MakeRptCmt	(0X2E0,	"de = bytes 2-3 of sound data = pointer");
	MakeRptCmt	(0X2E2,	"a = first byte of current channel");
	MakeRptCmt	(0X2E3,	"if first byte = FF, there is no data to setup, so skip subroutine call");
	MakeRptCmt	(0X2ED,	"go to next channel data");
	MakeRptCmt	(0X2EF,	"loop");
	MakeCode	(0X2F3);
	MakeRptCmt	(0X2F6,	"This is the only place where those two bytes could be used");
	MakeRptCmt	(0X2FB,	"if (0x1FFE) > (0x152E), don't load the sound. But it never happens, at least in Shining Force 2");
	MakeRptCmt	(0X302,	"loop 3 times");
	MakeRptCmt	(0X305,	"the 3 channel SFX are stored in dedicated temp channel data, in order not to overwrite current music data");
	MakeCode	(x=0X305);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X30D,	"hl points to next pointer");
	MakeRptCmt	(0X30E,	"a = first byte of current channel");
	MakeRptCmt	(0X311,	"if a = FF, ignore this channel");
	MakeRptCmt	(0X313,	"otherwise, init channel data");
	MakeRptCmt	(0X316,	"YM register : Key on/off");
	MakeRptCmt	(0X318,	"input \"key off\" for YM channel 4, 5, 6 respectively for channel 1,2,3 of the sound");
	MakeRptCmt	(0X31B,	"a = c = current YM channel to use");
	MakeRptCmt	(0X31C,	"a = YM register to activate left and right stereo outputs");
	MakeRptCmt	(0X31F,	"sets stereo left and right on");
	MakeRptCmt	(0X327,	"point next channel destination slot");
	MakeRptCmt	(0X32A,	"next channel number");
	MakeRptCmt	(0X32B,	"loop");
	MakeCode	(0X330);
	MakeName	(0X330,	"InitChannelDataForSFX");
	MakeRptCmt	(0X333,	"bytes 0-1 = ed = offset of channel data source");
	MakeRptCmt	(0X338,	"byte 1E = C0");
	MakeRptCmt	(0X33B,	"clear a");
	MakeRptCmt	(0X33C,	"clear all those bytes");
	MakeRptCmt	(0X359,	"byte 1E = 1 ... er ... why is it set to $CO first and then to 1 at the end ?");
	MakeComm	(0X35D,	"the subroutine sets key off / mutes channels playing music");
	MakeCode	(0X35D);
	MakeName	(0X35D,	"StopMusic");
	MakeCode	(x=0X35E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X369);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X370,	"YM register : Key on/off");
	MakeRptCmt	(0X373,	"set Key OFF");
	MakeCode	(x=0X37A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X381,	"YM register : Key on/off");
	MakeRptCmt	(0X384,	"set Key OFF");
	MakeCode	(x=0X38B);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0X392,	"YM register : Key on/off");
	MakeRptCmt	(0X395,	"set Key OFF");
	MakeCode	(x=0X3A8);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X3AF,	"YM register : Key on/off");
	MakeCode	(x=0X3BF);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X3C6,	"YM register : Key on/off");
	MakeCode	(x=0X3D6);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X3DD,	"YM register : Key on/off");
	MakeCode	(x=0X3E3);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X3E8,	"set PSG channel 1 volume to 0");
	MakeRptCmt	(0X3EB,	"set PSG channel 2 volume to 0");
	MakeRptCmt	(0X3EE,	"set PSG channel 3 volume to 0");
	MakeRptCmt	(0X3F1,	"set PSG noise channel volume to 0");
	MakeCode	(x=0X3F2);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X3F5,	"value to add to pointer to go to next channel in ram");
	MakeRptCmt	(0X3F8,	"loop ten times");
	MakeRptCmt	(0X3FC,	"set \"Channel not in use\" byte");
	MakeRptCmt	(0X3FD,	"go to next channel");
	MakeRptCmt	(0X3FE,	"loop until PSG Noise Channel. SFX extra channels are not concerned.");
	MakeComm	(0X416,	"this is THE subroutine that updates every channel at each YM Timer overflow. Quite important !");
	MakeCode	(0X416);
	MakeName	(0X416,	"UpdateSound");
	MakeRptCmt	(0X419,	"bc = enable DAC");
	MakeRptCmt	(0X420,	"if music uses DAC samples, enable DAC");
	MakeRptCmt	(0X426,	"else, if (0x1503) = 0, then a DAC sample is played as an SFX, so enable DAC");
	MakeRptCmt	(0X428,	"else, disable DAC");
	MakeRptCmt	(0X42B,	"enable/disable DAC");
	MakeCode	(x=0X42E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X431,	"increment counter");
	MakeRptCmt	(0X435,	"two circular right rotates");
	MakeRptCmt	(0X437,	"just keep nibble 1 * 4");
	MakeRptCmt	(0X43E,	"if MusicCounter = Nibble 1 * 4 and != 0");
	MakeRptCmt	(0X43F,	"clear MusicCounter");
	MakeCode	(x=0X440);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X448,	"if music level not 0F, increment it and update YM instruments levels");
	MakeRptCmt	(0X453,	"jump unless currently executing a fade out");
	MakeRptCmt	(0X465,	"increment fade out counter if fade out timer has reached 0");
	MakeRptCmt	(0X46C,	"if FadeOutCounter = 0Ch, then stop music because it's the end of a fade out operation");
	MakeCode	(0X471);
	MakeRptCmt	(0X472,	"decrement fade out timer");
	MakeRptCmt	(0X475,	"reload timer B");
	MakeCode	(x=0X478);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X47D,	"taking care of the music channel data");
	MakeRptCmt	(0X480,	"taking care of YM 1,2,3");
	MakeRptCmt	(0X497,	"taking care of YM 4,5,6");
	MakeRptCmt	(0X4C8,	"taking care of SFX channel data");
	MakeRptCmt	(0X4CB,	"when a 3-channel SFX is played, it has priority over music on YM4,5,6");
	MakeComm	(0X4E5,	"reset timers A and B, enable and load B");
	MakeCode	(0X4E5);
	MakeName	(0X4E5,	"YM_LoadTimerB");
	MakeCode	(0X4EA);
	MakeName	(0X4EA,	"YM1_ConditionnalInput");
	MakeRptCmt	(0X4EE,	"if currently managing SFX channel data, then just send data to YM1");
	MakeRptCmt	(0X4F1,	"otherwise, check if an SFX is being played on YM4,5,6");
	MakeRptCmt	(0X4F8,	"get \"channel not in use\" byte for SFX Channel 1");
	MakeRptCmt	(0X4FB,	"don't send data to YM if an SFX is being played, as it has priority over music");
	MakeCode	(0X4FE);
	MakeName	(0X4FE,	"YM_Input");
	MakeRptCmt	(0X502,	"if CallYm2InsteadOfYm1 set");
	MakeComm	(0X504,	"the subroutine sends value c in register b of YM1");
	MakeName	(0X504,	"YM1_Input");
	MakeRptCmt	(0X509,	"loop as long as YM2612 busy");
	MakeRptCmt	(0X50C,	"write address to part I");
	MakeRptCmt	(0X510,	"write data to part I");
	MakeCode	(0X514);
	MakeName	(0X514,	"YM2_ConditionalInput");
	MakeRptCmt	(0X518,	"if currently managing SFX channel ram data, just send byte to YM");
	MakeRptCmt	(0X51B,	"otherwise, first check if an SFX is being played with YM4,5,6 channels");
	MakeRptCmt	(0X522,	"get \"channel not in use\" byte of SFX channel 1");
	MakeRptCmt	(0X524,	"if SFX currently being played, then don't send data to YM2, as SFX has priority");
	MakeName	(0X526,	"YM2_Input");
	MakeRptCmt	(0X52B,	"loop as long as YM2612 busy");
	MakeRptCmt	(0X52E,	"write address to YM2");
	MakeRptCmt	(0X532,	"write data to YM2");
	MakeComm	(0X536,	"just keep attenuation parameter");
	MakeCode	(0X536);
	MakeName	(0X536,	"PSG_SetChannelAttenuation");
	MakeRptCmt	(0X538,	"save it");
	MakeRptCmt	(0X539,	"get concerned channel");
	MakeRptCmt	(0X53C,	"load attenuation value");
	MakeRptCmt	(0X53D,	"load attenuation command bits");
	MakeRptCmt	(0X53F,	"send message");
	MakeCode	(0X543);
	MakeName	(0X543,	"DAC_SetNewSample");
	MakeRptCmt	(0X548,	"if currently managing SFX channel ram data, just set new sample to load");
	MakeRptCmt	(0X54B,	"otherwise, check if an SFX is being played, since it has priority");
	MakeRptCmt	(0X552,	"get \"channel not in use\" byte for SFX Channel 1");
	MakeRptCmt	(0X555,	"if SFX Channel 1 in use, return");
	MakeRptCmt	(0X559,	"if fade out counter > 3, don't play sample, it would be too loud compared to the other channels");
	MakeRptCmt	(0X55F,	"if general sound level not at its max, then don't play sample");
	MakeComm	(0X567,	"iy : channel to process");
	MakeCode	(0X567);
	MakeName	(0X567,	"YM1_ParseData");
	MakeCode	(x=0X56A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X56F,	"THIS PART just inits iy, ix, and frequency registers");
	MakeRptCmt	(0X573,	"a = 20h * a");
	MakeRptCmt	(0X577,	"point to appropriate channel ram data");
	MakeRptCmt	(0X57C,	"A0 + channel number : first input address of frequency  register");
	MakeRptCmt	(0X57D,	"parameter directly moved to code in ram !");
	MakeRptCmt	(0X582,	"(0x77E) + 4 : second input address of frequency register");
	MakeRptCmt	(0X583,	"parameter directly moved to code in ram !");
	MakeComm	(0X586,	"THIS PART checks if the channel actually has to be used or not");
	MakeRptCmt	(0X58A,	"if byte 3 = 1, do nothing with this channel");
	MakeRptCmt	(0X58B,	"THIS PART seems to check if it's time to release key or not yet");
	MakeRptCmt	(0X591,	"if bytes 2 != byte 6, then it's not yet the end of note");
	MakeRptCmt	(0X593,	"if byte 2 = byte 6, end of note counter, check byte 8");
	MakeRptCmt	(0X597,	"if byte 8 != 0");
	MakeRptCmt	(0X599,	"so if (byte 2 = byte 6) and (byte 8 = 0), set key off");
	MakeRptCmt	(0X59B,	"concerned channel");
	MakeRptCmt	(0X59F,	"set key OFF");
	MakeComm	(0X5A2,	"THIS PART checks if it's time to parse new music data or not yet (I think)");
	MakeRptCmt	(0X5A6,	"if byte 2 != 0");
	MakeRptCmt	(0X5AC,	"get ROM offset of next byte to parse");
	MakeComm	(0X5AF,	"THIS PART checks if parsed byte is a command or a parameter");
	MakeRptCmt	(0X5B0,	"clear vibrato relative pointer");
	MakeRptCmt	(0X5B6,	"load time counter before vibrato");
	MakeRptCmt	(0X5B9,	"get pointed byte in rom");
	MakeRptCmt	(0X5BA,	"keep only bits 7-3");
	MakeRptCmt	(0X5BE,	"if kept bits of pointed byte != F8, so if data byte is not a command");
	MakeRptCmt	(0X5C1,	"else, value of pointed rom byte is a command");
	MakeRptCmt	(0X5C4,	"if pointed byte != FF, go test other possible command values");
	MakeRptCmt	(0X5C7,	"if pointed rom byte = FF, then get next two bytes");
	MakeRptCmt	(0X5C8,	"THIS PART handles an FF command");
	MakeRptCmt	(0X5CE,	"if second byte != 0, we have FF xx xx, so go parse from new offset xxxx");
	MakeRptCmt	(0X5D2,	"if we have FF 00 00, then mute channel because there is nothing else to do");
	MakeRptCmt	(0X5D4,	"else, we have FF xx 00, so put first byte in 0x1FFF to process operation xx");
	MakeRptCmt	(0X5D7,	"THIS PART mutes the channel because it has nothing to play");
	MakeRptCmt	(0X5D9,	"channel data byte 3 = 1");
	MakeRptCmt	(0X5DD,	"set channel level to minimum and leave subroutine");
	MakeRptCmt	(0X5E0,	"THIS PART puts in de the new offset from which to parse data");
	MakeCode	(0X5E0);
	MakeComm	(0X5E3,	"FE xx : set new instrument xx");
	MakeCode	(0X5E3);
	MakeRptCmt	(0X5F0,	"FD xx : play note at level xx. It's followed by other parameters handled at next parsing loop");
	MakeCode	(0X5F0);
	MakeRptCmt	(0X5F5,	"get note level");
	MakeCode	(0X5FF);
	MakeCode	(0X609);
	MakeCode	(0X613);
	MakeCode	(0X61D);
	MakeCode	(0X627);
	MakeComm	(0X631,	"if none of the commands from above are found,");
	MakeCode	(0X631);
	MakeRptCmt	(0X632,	"then ignore and start process again two bytes forward. Theoretically, it can't happen ...");
	MakeRptCmt	(0X636,	"we are here because a < F8, so a can still be F0, 70, or a new note frequency to play");
	MakeCode	(0X636);
	MakeRptCmt	(0X63B,	"if a = F0 or 70. Else, a is a note frequency byte");
	MakeRptCmt	(0X63E,	"1C affects note index up or down. It's set by command F9");
	MakeRptCmt	(0X644,	"load table of YM frequencies");
	MakeCode	(x=0X644);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X648,	"now hl points to the YM frequency value corresponding to the note's frequency");
	MakeRptCmt	(0X64B,	"l = byte to put in YM Register Frequency 2");
	MakeRptCmt	(0X64C,	"h = byte to put in YM Register Frequency 1");
	MakeRptCmt	(0X64F,	"byte 1D affects frequency up. It's set by command F9. Is it used ? I'll look in SF2 musics");
	MakeRptCmt	(0X656,	"YM Register : Frequency 2");
	MakeRptCmt	(0X657,	"input value");
	MakeRptCmt	(0X65B,	"if channel byte 1F != 0, then pitch slide is activated");
	MakeRptCmt	(0X65E,	"so keep final value to reach in channel byte 12");
	MakeRptCmt	(0X65F,	"then jump");
	MakeRptCmt	(0X661,	"else, put it directly in channel byte 0F");
	MakeRptCmt	(0X66E,	"YM register : Frequency 1");
	MakeRptCmt	(0X66F,	"input value");
	MakeRptCmt	(0X673,	"if channel byte 1F != 0, pitch slide is activated");
	MakeRptCmt	(0X676,	"so keep value in channel byte 11");
	MakeRptCmt	(0X677,	"then jump");
	MakeRptCmt	(0X679,	"else, put it directly in channel byte 0E");
	MakeRptCmt	(0X683,	"YM Register : Key on/off");
	MakeRptCmt	(0X688,	"set key ON");
	MakeRptCmt	(0X68E,	"get full byte again");
	MakeRptCmt	(0X691,	"if bit 7 set, then it's command F0 or it's new note to play needing new note length");
	MakeRptCmt	(0X693,	"else use existing time period");
	MakeRptCmt	(0X698,	"if a's bit 7 is set, then it's F0");
	MakeCode	(0X698);
	MakeRptCmt	(0X699,	"set a new time period with next byte");
	MakeComm	(0X69D,	"also put time period in channel byte 2, which is the time counter");
	MakeRptCmt	(0X6A1,	"point to next channel rom byte");
	MakeComm	(0X6AA,	"decrement channel time counter");
	MakeCode	(0X6AA);
	MakeRptCmt	(0X6B5,	"if bc = 0, then there is no pitch slide");
	MakeRptCmt	(0X6B7,	"else, pitch slide !");
	MakeRptCmt	(0X6BE,	"hl = current frequency ; bc = frequency to reach");
	MakeRptCmt	(0X6C2,	"get frequency difference");
	MakeRptCmt	(0X6C5,	"save first frequency byte ... why ?");
	MakeRptCmt	(0X6C8,	"if bc <= hl, so if frequency value to reach is lower");
	MakeRptCmt	(0X6CC,	"frequency to reach is higher, so get slide up value");
	MakeRptCmt	(0X6D2,	"frequency to reach is lower, so get slide down value");
	MakeCode	(0X6D2);
	MakeRptCmt	(0X6D7,	"get negative value of pitch slide speed in order to slide down");
	MakeRptCmt	(0X6DB,	"apply slide on frequency");
	MakeRptCmt	(0X6DF,	"get new frequency difference");
	MakeRptCmt	(0X6E1,	"xor old h and new h");
	MakeRptCmt	(0X6E8,	"jump if bit 7 of xor result = 1, go put final pitch as current frequency, but how can it happen ?");
	MakeRptCmt	(0X6EC,	"leave octave bits, just keep frequency bits");
	MakeRptCmt	(0X6EF,	"save new frequency");
	MakeRptCmt	(0X6F8,	"if hl frequency (without octave) < $4D4");
	MakeRptCmt	(0X6FA,	"hl > $4D4, so add $596");
	MakeCode	(0X700);
	MakeRptCmt	(0X703,	"2 * $26A = $4D4");
	MakeRptCmt	(0X709,	"if hl frequency (without octave) >= 26A");
	MakeRptCmt	(0X70B,	"hl < $26A, so sub $596");
	MakeRptCmt	(0X711,	"hl between $26A and $4D4, so do nothing");
	MakeCode	(0X711);
	MakeRptCmt	(0X717,	"set new frequency... but why do they have to add/sub $596 O___o ?!");
	MakeRptCmt	(0X721,	"current frequency = final slide pitch");
	MakeCode	(0X721);
	MakeRptCmt	(0X728,	"end of slide");
	MakeRptCmt	(0X732,	"if channel byte 0A = 0 ... then start vibrato ?");
	MakeRptCmt	(0X734,	"decrement channel byte 0A : I think this is a time counter before note vibrato");
	MakeCode	(0X73A);
	MakeRptCmt	(0X741,	"hl = vibrato pointer");
	MakeRptCmt	(0X742,	"get vibrato relative pointer");
	MakeRptCmt	(0X74B,	"point to next vibrato byte");
	MakeRptCmt	(0X751,	"if byte = 81, point previous byte and do nothing ? O_o");
	MakeRptCmt	(0X754,	"anyway, there's no $81 in the data -_- ...");
	MakeCode	(0X757);
	MakeRptCmt	(0X75C,	"if byte = 80, it's the end of vibrato data, so go back to the beginning");
	MakeComm	(0X763,	"a = vibrato value to apply");
	MakeCode	(0X763);
	MakeRptCmt	(0X76B,	"hl = current note's frequency value");
	MakeRptCmt	(0X772,	"if c is a negative value, b = FF");
	MakeComm	(0X773,	"after this, up to date frequency is sent to YM");
	MakeComm	(0X774,	"dynamically changed : 2nd frequency register corresponding to current channel");
	MakeRptCmt	(0X77D,	"dynamically changed : 1st frequency register to use corresponding to current channel");
	MakeRptCmt	(0X78B,	"if currently fading out, make sure the instrument level is updated");
	MakeComm	(0X791,	"exactly the same general behaviour as YM1_ParseData, with access to YM2 instead");
	MakeCode	(0X791);
	MakeName	(0X791,	"YM2_ParseData");
	MakeCode	(x=0X794);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X7A9,	"point to the right SFX channel data");
	MakeRptCmt	(0X7CE,	"YM register : Key on/off");
	MakeRptCmt	(0X805,	"jump if FF xx xx");
	MakeRptCmt	(0X807,	"else, end of data for this channel");
	MakeRptCmt	(0X817,	"if an SFX was being managed, go back to corresponding music channel");
	MakeRptCmt	(0X81C,	"YM Register : Stereo / LFO Sensitivity");
	MakeRptCmt	(0X822,	"load corresponding music channel stereo setting");
	MakeRptCmt	(0X82E,	"if corresponding music channel in use, load its instrument, and return");
	MakeCode	(0X834);
	MakeCode	(0X838);
	MakeCode	(0X83B);
	MakeCode	(0X848);
	MakeCode	(0X857);
	MakeCode	(0X861);
	MakeCode	(0X86B);
	MakeCode	(0X875);
	MakeCode	(0X87F);
	MakeCode	(0X889);
	MakeCode	(0X88E);
	MakeRptCmt	(0X896,	"index");
	MakeCode	(x=0X89C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X8A4,	"hl = corresponding word");
	MakeRptCmt	(0X8DB,	"YM register : Key on/off");
	MakeCode	(0X8F2);
	MakeCode	(0X904);
	MakeCode	(0X92C);
	MakeCode	(0X95A);
	MakeCode	(0X96B);
	MakeCode	(0X97B);
	MakeCode	(0X994);
	MakeCode	(0X9B1);
	MakeCode	(0X9BD);
	MakeComm	(0X9F0,	"just set instrument value in channel byte 10 without loading it into YM");
	MakeCode	(0X9F0);
	MakeName	(0X9F0,	"YM1_SetChannelInstrument");
	MakeRptCmt	(0X9F4,	"unused code");
	MakeCode	(0X9F7);
	MakeName	(0X9F7,	"YM1_LoadInstrument");
	MakeRptCmt	(0X9FA,	"a is the total level of the instrument");
	MakeRptCmt	(0XA0C,	"put level to 0");
	MakeRptCmt	(0XA0F,	"load instrument index");
	MakeRptCmt	(0XA25,	"hl now points to the first byte of the instrument to load");
	MakeRptCmt	(0XA27,	"get algorithm byte");
	MakeRptCmt	(0XA2C,	"only keep algo bits");
	MakeRptCmt	(0XA2E,	"store algo value");
	MakeRptCmt	(0XA31,	"get back instrument start offset");
	MakeRptCmt	(0XA32,	"get currently managed channel value");
	MakeRptCmt	(0XA35,	"register value for detune/multiple");
	MakeRptCmt	(0XA37,	"loop 4 times");
	MakeRptCmt	(0XA3A,	"YM Register : detune/multiple");
	MakeRptCmt	(0XA47,	"store register value : 40h");
	MakeCode	(x=0XA4F);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0XA54,	"put corresponding value in c");
	MakeRptCmt	(0XA55,	"get Algo");
	MakeCode	(x=0XA58);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0XA5C,	"put corresponding value in d");
	MakeRptCmt	(0XA61,	"loop 4 times");
	MakeRptCmt	(0XA64,	"YM Register : Total level");
	MakeRptCmt	(0XA68,	"if rotated bit = 0, then use original instrument level");
	MakeRptCmt	(0XA6A,	"else, the operator is a slot, so use channel level");
	MakeRptCmt	(0XA6C,	"instrument's operator total level value");
	MakeRptCmt	(0XA71,	"if result > 7F, then put 7F, since it's the max value");
	MakeRptCmt	(0XA78,	"get instrument's operator level");
	MakeCode	(0XA78);
	MakeRptCmt	(0XA83,	"loop 20d times, so 5 * 4 operators, so from 50h to A0h");
	MakeRptCmt	(0XA86,	"YM Register : Rate scalling / Attack rate, First decay rate / Amplitude modulation ...");
	MakeRptCmt	(0XA87,	"... Secondary decay rate, Secondary amplitude / Release rate, SSG-EG");
	MakeRptCmt	(0XA95,	"YM Register : Feedback / Algorithm");
	MakeCode	(0XA9E);
	MakeName	(0XA9E,	"YM2_setChannelInstrument");
	MakeRptCmt	(0XAA2,	"unused code");
	MakeCode	(0XAA5);
	MakeName	(0XAA5,	"YM2_LoadInstrument");
	MakeCode	(0XAB6);
	MakeRptCmt	(0XAC8,	"same as in YM1 version of subroutine, load instrument index etc...");
	MakeCode	(x=0XB08);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XB11);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0XB31);
	MakeCode	(x=0XB57);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeName	(0XB57,	"YM2_ParseChannel6Data");
	MakeRptCmt	(0XB61,	"if we are currently managing an SFX using the 3 extra RAM areas, point to the right area");
	MakeRptCmt	(0XB66,	"then don't even check if it uses DAC samples ... so for that kind of SFX, always use DAC ?");
	MakeCode	(0XB68);
	MakeRptCmt	(0XB6C,	"jump to classic parsing subroutine if channel 6 is not in DAC mode");
	MakeComm	(0XB6F,	"check with byte 3 if channel 3 has something to do or not");
	MakeRptCmt	(0XB74,	"check if time counter 02 has reached key release value 06");
	MakeRptCmt	(0XB7C,	"check if \"don't release key\" byte 08 is set");
	MakeRptCmt	(0XB80,	"don't jump if byte 02 = byte 06 and byte 08 = 0");
	MakeRptCmt	(0XB84,	"play nothing !");
	MakeRptCmt	(0XB87,	"check if it's time to parse new data or not yet");
	MakeRptCmt	(0XB8E,	"get data pointer");
	MakeRptCmt	(0XB94,	"get data to parse");
	MakeRptCmt	(0XB99,	"jump if it's not a command");
	MakeRptCmt	(0XB9C,	"else, parse command");
	MakeRptCmt	(0XB9F,	"jump if command is not FF");
	MakeRptCmt	(0XBA2,	"if command is FF, parse next bytes");
	MakeRptCmt	(0XBA9,	"jump when it's FF xx xx, meaning \"parse from new offset xxxx\"");
	MakeRptCmt	(0XBAB,	"else, you have FF 00 00, so end parsing and mute channel");
	MakeRptCmt	(0XBB9,	"if music uses DAC samples, return");
	MakeRptCmt	(0XBBF,	"if it's not managing an SFX, return");
	MakeRptCmt	(0XBC1,	"go back to YM Channel 6 area");
	MakeRptCmt	(0XBC6,	"YM Register : Stereo / LFO Sensitivity");
	MakeRptCmt	(0XBCF,	"set stereo");
	MakeRptCmt	(0XBD6,	"return if channel has nothing to do");
	MakeRptCmt	(0XBDB,	"else, load note and return");
	MakeCode	(0XBDE);
	MakeCode	(0XBDF);
	MakeCode	(0XBE2);
	MakeCode	(0XBEC);
	MakeCode	(0XBF6);
	MakeCode	(0XC00);
	MakeRptCmt	(0XC05,	"parsed byte is not a command");
	MakeCode	(0XC05);
	MakeRptCmt	(0XC0A,	"if byte is F0 or 70");
	MakeRptCmt	(0XC0D,	"else, it's a new sample index : bits 6-0 + 1");
	MakeRptCmt	(0XC12,	"if bit 7 = 1, then next byte is sample play length");
	MakeRptCmt	(0XC16,	"else, load current sample play length");
	MakeRptCmt	(0XC1B,	"get sample play length byte");
	MakeCode	(0XC1B);
	MakeRptCmt	(0XC1D,	"set new sample play length");
	MakeRptCmt	(0XC20,	"restart counter with sample play length value");
	MakeRptCmt	(0XC24,	"point to next byte to parse");
	MakeRptCmt	(0XC2A,	"go back to the beginning of subroutine");
	MakeRptCmt	(0XC2D,	"if it's not end of sample play, decrement counter and return");
	MakeCode	(0XC2D);
	MakeRptCmt	(0XC34,	"return in any way !");
	MakeComm	(0XC36,	"a = index of currently managed channel");
	MakeCode	(0XC36);
	MakeName	(0XC36,	"PSG_ParseToneData");
	MakeRptCmt	(0XC39,	"start of PSG channel data");
	MakeCode	(x=0XC39);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0XC44,	"hl = 20h * a");
	MakeRptCmt	(0XC46,	"ix now points to concerned channel");
	MakeRptCmt	(0XC4A,	"channel value now in right place to make a PSG command");
	MakeRptCmt	(0XC4B,	"make sure only the two interesting bits are used");
	MakeRptCmt	(0XC4D,	"save channel number stored in that way");
	MakeRptCmt	(0XC50,	"get byte 3 of channel data");
	MakeRptCmt	(0XC54,	"return if channel has nothing to do");
	MakeRptCmt	(0XC55,	"get time counter");
	MakeRptCmt	(0XC59,	"don't jump if it's time to parse next byte");
	MakeRptCmt	(0XC5C,	"if counter = 0, parse next byte");
	MakeRptCmt	(0XC5F,	"load channel data pointer");
	MakeRptCmt	(0XC62,	"get pointed data");
	MakeRptCmt	(0XC67,	"if byte is not a command");
	MakeRptCmt	(0XC6A,	"get byte again");
	MakeRptCmt	(0XC6D,	"if a != FF check other possible command values");
	MakeRptCmt	(0XC70,	"a = FF");
	MakeRptCmt	(0XC77,	"FF xx xx, go parse at new offset xxxx");
	MakeRptCmt	(0XC79,	"FF 00 00, end of data, mute channel and return");
	MakeRptCmt	(0XC7B,	"byte 3 of channel data = 1");
	MakeRptCmt	(0XC85,	"concerned channel volume : OFF");
	MakeCode	(0XC88);
	MakeCode	(0XC8B);
	MakeCode	(0XC95);
	MakeCode	(0XC9F);
	MakeCode	(0XCA9);
	MakeRptCmt	(0XCAE,	"YM Register : Timer B value");
	MakeCode	(0XCB9);
	MakeCode	(0XCC3);
	MakeRptCmt	(0XCCD,	"Unidentified_Command");
	MakeCode	(0XCCD);
	MakeRptCmt	(0XCD2,	"byte is not a command");
	MakeCode	(0XCD2);
	MakeRptCmt	(0XCD7,	"jump if byte = F0 or 70");
	MakeRptCmt	(0XCDA,	"keep byte without bit 7 : new note");
	MakeRptCmt	(0XCDF,	"jump if byte 1E = 0. Byte 1E is set when key has just been released");
	MakeRptCmt	(0XCE1,	"key has just been released");
	MakeRptCmt	(0XCE2,	"reset instrument relative pointer");
	MakeRptCmt	(0XCE5,	"clear byte 1E");
	MakeRptCmt	(0XCE8,	"reset vibrato counter");
	MakeRptCmt	(0XCEF,	"reset vibrato relative pointer");
	MakeRptCmt	(0XCF2,	"get back byte without bit 7");
	MakeRptCmt	(0XCF3,	"add note shift value");
	MakeCode	(x=0XCFB);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0XD03,	"hl = corresponding frequency");
	MakeRptCmt	(0XD0B,	"add frequency shift value");
	MakeRptCmt	(0XD0D,	"keep frequency value to play");
	MakeRptCmt	(0XD17,	"keep only bit 7");
	MakeRptCmt	(0XD1B,	"if byte = F0 or 70");
	MakeCode	(0XD1B);
	MakeRptCmt	(0XD1E,	"set bit 0");
	MakeRptCmt	(0XD23,	"get full byte again");
	MakeRptCmt	(0XD26,	"if bit 7 = 1, set note length");
	MakeCode	(0XD2D);
	MakeRptCmt	(0XD2F,	"set new note length");
	MakeRptCmt	(0XD32,	"reset time counter");
	MakeRptCmt	(0XD36,	"save offset of next byte to parse");
	MakeRptCmt	(0XD3F,	"decrement counter");
	MakeCode	(0XD3F);
	MakeRptCmt	(0XD46,	"jump if vibrato must be applied");
	MakeRptCmt	(0XD48,	"decrement vibrato counter");
	MakeCode	(0XD4E);
	MakeCode	(0XD6A);
	MakeCode	(0XD76);
	MakeRptCmt	(0XD8E,	"now vibrato is applied");
	MakeRptCmt	(0XD91,	"THIS PART will change the level depending on the PSG Instrument");
	MakeRptCmt	(0XD94,	"byte b = 8x or 0x");
	MakeRptCmt	(0XD97,	"if byte $8x, then it's data end, so just keep applying the same level alteration");
	MakeRptCmt	(0XD99,	"if byte 0x, point to next byte");
	MakeRptCmt	(0XD9D,	"keep x only");
	MakeRptCmt	(0XDA6,	"a = level affected by instrument");
	MakeRptCmt	(0XDA7,	"make sure value is at least 0");
	MakeRptCmt	(0XDAA,	"put level to apply in b");
	MakeRptCmt	(0XDB0,	"jump if it's PSG Tone 1 or 2 Channels");
	MakeRptCmt	(0XDB2,	"if PSG Tone 3 Channel, apply max level");
	MakeCode	(0XDB6);
	MakeRptCmt	(0XDBC,	"make sure level is at least 0");
	MakeRptCmt	(0XDBF,	"store level to apply in byte 05");
	MakeRptCmt	(0XDC9,	"if counter = 0, jump to release key part");
	MakeRptCmt	(0XDCD,	"jump if byte 08 bit 7 = 1");
	MakeRptCmt	(0XDD2,	"or if byte 02 != byte 06");
	MakeRptCmt	(0XDD6,	"leave if byte 08 != 0");
	MakeRptCmt	(0XDDA,	"set byte 1E to \"release key\" before next note");
	MakeRptCmt	(0XDDF,	"byte 08 = $03");
	MakeRptCmt	(0XDE8,	"increment relative pointer until pointed byte's bit 7 = 1");
	MakeRptCmt	(0XDEF,	"now byte 12 points to instrument release data");
	MakeCode	(0XDEF);
	MakeRptCmt	(0XDFD,	"jump if currently managing PSG Tone 3 Channel");
	MakeRptCmt	(0XE05,	"decrement level if currently fading out and fade out timer = 0");
	MakeRptCmt	(0XE09,	"transmit Frequency data to PSG");
	MakeRptCmt	(0XE1A,	"first byte of tone channel frequency command");
	MakeRptCmt	(0XE28,	"second byte of tone channel frequency command");
	MakeRptCmt	(0XE2B,	"starting attenuation value");
	MakeRptCmt	(0XE2D,	"get level to apply");
	MakeRptCmt	(0XE30,	"save it");
	MakeRptCmt	(0XE31,	"get channel number");
	MakeRptCmt	(0XE34,	"load saved value");
	MakeRptCmt	(0XE35,	"load attenuation command bits");
	MakeCode	(0XE3B);
	MakeName	(0XE3B,	"PSG_GetInstrumentPointer");
	MakeRptCmt	(0XE3F,	"bytes 10-11 : pointer");
	MakeRptCmt	(0XE45,	"byte 12 : relative pointer to add to 10-11 pointer");
	MakeComm	(0XE4B,	"load psg instrument x at level y");
	MakeCode	(0XE4B);
	MakeName	(0XE4B,	"PSG_LoadInstrument");
	MakeRptCmt	(0XE4E,	"keep only nibble 2 : instrument level");
	MakeRptCmt	(0XE54,	"if it's PSG Tone 3 Channel");
	MakeRptCmt	(0XE5C,	"don't jump if 0, so load new level");
	MakeComm	(0XE5E,	"if it's PSG Tone 3 channel, keep nibble 2 in byte 04");
	MakeRptCmt	(0XE5E,	"load instrument level");
	MakeComm	(0XE61,	"get back full byte");
	MakeRptCmt	(0XE66,	"get psg instrument index");
	MakeCode	(x=0XE6D);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0XE74,	"get instrument pointer");
	MakeCode	(0XE7B);
	MakeName	(0XE7B,	"PSG_ParseNoiseData");
	MakeCode	(x=0XE7E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0XE8B,	"don't parse if channel not in use");
	MakeRptCmt	(0XE8F,	"check note time counter");
	MakeRptCmt	(0XE90,	"jump if it's not the end of the note");
	MakeRptCmt	(0XE96,	"if it's the end of the note, get data pointer to parse next byte");
	MakeRptCmt	(0XE9E,	"jump if parsed byte is not a command");
	MakeRptCmt	(0XEA4,	"jump if command is not $FF");
	MakeRptCmt	(0XEAE,	"jump if command is FF xx xx");
	MakeRptCmt	(0XEB2,	"else, FF 00 00 : stop using this channel");
	MakeCode	(0XEBF);
	MakeCode	(0XEC3);
	MakeCode	(0XECD);
	MakeCode	(0XED7);
	MakeCode	(0XEE1);
	MakeCode	(0XEE6);
	MakeRptCmt	(0XEEB,	"jump if byte = F0 or 70");
	MakeRptCmt	(0XEEE,	"keep byte without bit 7 : new note");
	MakeRptCmt	(0XEF3,	"jump if key has not just been released");
	MakeRptCmt	(0XEF5,	"key has just been released");
	MakeRptCmt	(0XEF6,	"reset instrument relative pointer");
	MakeRptCmt	(0XEF9,	"clear key release indicator");
	MakeRptCmt	(0XEFD,	"just keep bits 2-0");
	MakeRptCmt	(0XF01,	"transmit feedback and freqency");
	MakeCode	(0XF0B);
	MakeRptCmt	(0XF13,	"get full byte again");
	MakeRptCmt	(0XF16,	"if bit 7 is set, next byte is note length to apply");
	MakeCode	(0XF1D);
	MakeRptCmt	(0XF1F,	"set new note length");
	MakeRptCmt	(0XF22,	"reset time counter");
	MakeRptCmt	(0XF26,	"point to next byte to parse");
	MakeRptCmt	(0XF2F,	"decrement time counter");
	MakeCode	(0XF2F);
	MakeRptCmt	(0XF32,	"affect level depending on PSG Instrument used");
	MakeRptCmt	(0XF35,	"byte b = 8x or 0x");
	MakeRptCmt	(0XF38,	"if byte $8x, then it's data end, so just keep applying the same level alteration");
	MakeRptCmt	(0XF3A,	"if byte 0x, point to next byte");
	MakeRptCmt	(0XF3E,	"keep x only");
	MakeRptCmt	(0XF47,	"a = level affected by instrument");
	MakeRptCmt	(0XF48,	"make sure value is at least 0");
	MakeRptCmt	(0XF4C,	"apply music level");
	MakeRptCmt	(0XF52,	"make sure level is at least 0");
	MakeRptCmt	(0XF55,	"keep level value");
	MakeRptCmt	(0XF5F,	"if counter = 0, jump to release key part");
	MakeRptCmt	(0XF63,	"jump if byte 08 bit 7 = 1");
	MakeRptCmt	(0XF68,	"or if byte 02 != byte 06");
	MakeRptCmt	(0XF6C,	"leave if byte 08 != 0");
	MakeRptCmt	(0XF70,	"set byte 1E to \"release key\" before next note");
	MakeRptCmt	(0XF75,	"byte 08 = $03");
	MakeRptCmt	(0XF7E,	"increment relative pointer until pointed byte's bit 7 = 1");
	MakeRptCmt	(0XF85,	"now byte 12 points to instrument release data");
	MakeCode	(0XF85);
	MakeRptCmt	(0XF94,	"decrement level if currently fading out and fade out timer = 0");
	MakeRptCmt	(0XF9A,	"get sound level and invert it to get sound attenuation");
	MakeRptCmt	(0XF9D,	"add attenuation command bits");
	MakeRptCmt	(0XF9F,	"transmit attenuation");
	MakeCode	(0XFA3);
	MakeName	(0XFA3,	"YM_SetSlideOrKeyRelease");
	MakeRptCmt	(0XFA4,	"get parameter");
	MakeRptCmt	(0XFA7,	"if parameter != $FF");
	MakeRptCmt	(0XFA9,	"if parameter = $FF, clear channel byte 1F");
	MakeCode	(0XFAF);
	MakeRptCmt	(0XFB1,	"jump if a < 81");
	MakeRptCmt	(0XFB5,	"else, put bits 6-0 in channel ram byte 1F");
	MakeComm	(0XFBA,	"point to next byte");
	MakeCode	(0XFBA);
	MakeName	(0XFBA,	"SetRelease");
	MakeRptCmt	(0XFBB,	"get next byte");
	MakeRptCmt	(0XFBF,	"bit 7 goes to channel data byte 8");
	MakeRptCmt	(0XFC5,	"bits 6-0 go to channel data byte 6");
	MakeRptCmt	(0XFC8,	"point to next byte");
	MakeComm	(0XFCA,	"affects channel ram bytes 09, 0B and 0C");
	MakeCode	(0XFCA);
	MakeName	(0XFCA,	"LoadVibrato");
	MakeRptCmt	(0XFCB,	"get next parameter : $2C");
	MakeRptCmt	(0XFD0,	"keep nibble 1 only, multiplied by 2 -> $04");
	MakeCode	(x=0XFD2);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0XFD8,	"point to the corresponding pointer");
	MakeRptCmt	(0XFE0,	"channel ram bytes B-C = 4th pointer");
	MakeRptCmt	(0XFE5,	"get nibble 2 only, multiplied by 2 -> $18");
	MakeRptCmt	(0XFE9,	"$17");
	MakeCode	(0XFEF);
	MakeName	(0XFEF,	"YM1_SetStereo");
	MakeRptCmt	(0XFF3,	"if bit 0 of pointed value is set to 1 : if FMS value = 1 or 3 ?");
	MakeRptCmt	(0XFF5,	"else");
	MakeRptCmt	(0XFFE,	"set proper register according to currently processed channel");
	MakeRptCmt	(0XFFF,	"point to next pointed rom byte");
	MakeCode	(0X1003);
	MakeName	(0X1003,	"YM2_SetStereo");
	MakeComm	(0X1016,	"that byte is never really used !");
	MakeCode	(0X1016);
	MakeName	(0X1016,	"UselessSubroutine");
	MakeCode	(0X101F);
	MakeName	(0X101F,	"LoadNoteShift");
	MakeComm	(0X1029,	"byte 1C = 0x or Fx depending on byte 7 : value of note shift");
	MakeRptCmt	(0X1030,	"just keep bytes 6-5-4 multiplied by 2");
	MakeRptCmt	(0X1032,	"value of frequeny shift");
	MakeCode	(0X1037);
	MakeName	(0X1037,	"ParseLoopCommand");
	MakeRptCmt	(0X1038,	"get first byte parameter");
	MakeRptCmt	(0X103A,	"point to next data byte");
	MakeRptCmt	(0X103E,	"keep bits 7-6-5. It must be a subcommand");
	MakeRptCmt	(0X1042,	"if bits 7-6-5 = 0, put next data byte offset into channel bytes 13-14");
	MakeRptCmt	(0X1045,	"this must be a loop start !");
	MakeComm	(0X1049,	"if bits 7-6-5 = 1 ... beginning of a loop ?");
	MakeCode	(0X1049);
	MakeRptCmt	(0X104D,	"put next data byte offset in 15-16");
	MakeRptCmt	(0X1050,	"is it also a loop start ? like there could be a loop in another loop ? Two loops managed independently ?");
	MakeRptCmt	(0X1054,	"clear 1A-1B");
	MakeComm	(0X105B,	"if bits 7-6-5 = 2");
	MakeCode	(0X105B);
	MakeRptCmt	(0X1063,	"if (1A) != 0, then it's not the first loop");
	MakeRptCmt	(0X1065,	"if (1A) = 0, then put 1 instead. It means it's the first loop.");
	MakeRptCmt	(0X106B,	"a = $F0");
	MakeCode	(0X106B);
	MakeRptCmt	(0X106C,	"b = $F0");
	MakeRptCmt	(0X106E,	"a = $D8");
	MakeRptCmt	(0X106F,	"c = $D8");
	MakeRptCmt	(0X1070,	"de points to a next F8 command");
	MakeRptCmt	(0X1071,	"a = $F0");
	MakeRptCmt	(0X1074,	"if first data byte = FF, finish");
	MakeRptCmt	(0X1078,	"if first data byte = F8 (then you have something like F8, byte with bits 7-6-5 = 2, and F8 again ?)");
	MakeRptCmt	(0X107C,	"if bit 7 of first data byte = 1, start process again");
	MakeRptCmt	(0X107E,	"else, start process again but point one byte backward first ... wow ... o_O");
	MakeCode	(0X1081);
	MakeRptCmt	(0X1084,	"if a = 60, finish, else start process again ... so it expects loop command 3 to get out of here !");
	MakeComm	(0X1089,	"if bits 7-6-5 = 3");
	MakeCode	(0X1089);
	MakeRptCmt	(0X1093,	"if (1B) = 0, then put 1 instead");
	MakeRptCmt	(0X1099,	"same idea as command 2");
	MakeCode	(0X1099);
	MakeCode	(0X10AF);
	MakeRptCmt	(0X10B2,	"expects command 4 to get out of here");
	MakeComm	(0X10B6,	"if bits 7-6-5 = 4 end of command 3");
	MakeCode	(0X10B6);
	MakeRptCmt	(0X10BA,	"if command 4, just return ! it's just here to stop command 3");
	MakeComm	(0X10BB,	"if bits 7-6-5 = 5 ... go back to the beginning of a loop ?");
	MakeCode	(0X10BB);
	MakeRptCmt	(0X10C1,	"if bit 0 = 1 (value A1)");
	MakeRptCmt	(0X10C3,	"else (value A0), point back to offset saved in 15-16");
	MakeRptCmt	(0X10CA,	"point back to offset saved in 13-14");
	MakeCode	(0X10CA);
	MakeComm	(0X10D1,	"if bits 7-6-5 = 6 : initiate a loop repeated x times, x being bits 4-0");
	MakeCode	(0X10D1);
	MakeRptCmt	(0X10D3,	"else, bits 7-6-5 = 7");
	MakeRptCmt	(0X10D5,	"put next data byte offset in 17-18");
	MakeRptCmt	(0X10DC,	"just keep parameter");
	MakeRptCmt	(0X10DE,	"increment it");
	MakeRptCmt	(0X10DF,	"and store it in 19");
	MakeRptCmt	(0X10E3,	"decrement loop counter");
	MakeCode	(0X10E3);
	MakeRptCmt	(0X10E6,	"return if counter reached 0");
	MakeRptCmt	(0X10E7,	"go back to the beginning of the loop");
	MakeComm	(0X10EE,	"set a fade out period length of $12 YM timer overflows");
	MakeCode	(0X10EE);
	MakeName	(0X10EE,	"Fade_Out");
	MakeCode	(0X10FF);
	MakeName	(0X10FF,	"YM_SetTimer");
	MakeRptCmt	(0X1100,	"YM Register : Timer B");
	MakeByte	(0X110B);
	MakeRptCmt	(0X110C,	"these words are not pointers, they are the two frequency bytes to send to YM for a given note");
	MakeByte	(0X110C);
	MakeName	(0X110C,	"t_YM_FREQUENCIES");
	MakeWord	(0X110D);
	MakeWord	(0X110F);
	MakeWord	(0X1111);
	MakeWord	(0X1113);
	MakeWord	(0X1115);
	MakeWord	(0X1117);
	MakeWord	(0X1119);
	MakeWord	(0X111B);
	MakeWord	(0X111D);
	MakeWord	(0X111F);
	MakeWord	(0X1121);
	MakeWord	(0X1123);
	MakeWord	(0X1125);
	MakeWord	(0X1127);
	MakeWord	(0X1129);
	MakeWord	(0X112B);
	MakeWord	(0X112D);
	MakeWord	(0X112F);
	MakeWord	(0X1131);
	MakeWord	(0X1133);
	MakeWord	(0X1135);
	MakeWord	(0X1137);
	MakeWord	(0X1139);
	MakeWord	(0X113B);
	MakeWord	(0X113D);
	MakeWord	(0X113F);
	MakeWord	(0X1141);
	MakeWord	(0X1143);
	MakeWord	(0X1145);
	MakeWord	(0X1147);
	MakeWord	(0X1149);
	MakeWord	(0X114B);
	MakeWord	(0X114D);
	MakeWord	(0X114F);
	MakeWord	(0X1151);
	MakeWord	(0X1153);
	MakeWord	(0X1155);
	MakeWord	(0X1157);
	MakeWord	(0X1159);
	MakeWord	(0X115B);
	MakeWord	(0X115D);
	MakeWord	(0X115F);
	MakeWord	(0X1161);
	MakeWord	(0X1163);
	MakeWord	(0X1165);
	MakeWord	(0X1167);
	MakeWord	(0X1169);
	MakeWord	(0X116B);
	MakeWord	(0X116D);
	MakeWord	(0X116F);
	MakeWord	(0X1171);
	MakeWord	(0X1173);
	MakeWord	(0X1175);
	MakeWord	(0X1177);
	MakeWord	(0X1179);
	MakeWord	(0X117B);
	MakeWord	(0X117D);
	MakeWord	(0X117F);
	MakeWord	(0X1181);
	MakeWord	(0X1183);
	MakeWord	(0X1185);
	MakeWord	(0X1187);
	MakeWord	(0X1189);
	MakeWord	(0X118B);
	MakeWord	(0X118D);
	MakeWord	(0X118F);
	MakeWord	(0X1191);
	MakeWord	(0X1193);
	MakeWord	(0X1195);
	MakeWord	(0X1197);
	MakeWord	(0X1199);
	MakeWord	(0X119B);
	MakeWord	(0X119D);
	MakeWord	(0X119F);
	MakeWord	(0X11A1);
	MakeWord	(0X11A3);
	MakeWord	(0X11A5);
	MakeWord	(0X11A7);
	MakeWord	(0X11A9);
	MakeWord	(0X11AB);
	MakeWord	(0X11AD);
	MakeWord	(0X11AF);
	MakeWord	(0X11B1);
	MakeRptCmt	(0X11B3,	"PSG Frequency table, same idea as YM Frequency table but for PSG Tone Channels");
	MakeWord	(0X11B3);
	MakeName	(0X11B3,	"t_PSG_FREQUENCIES");
	MakeWord	(0X11B5);
	MakeWord	(0X11B7);
	MakeWord	(0X11B9);
	MakeWord	(0X11BB);
	MakeWord	(0X11BD);
	MakeWord	(0X11BF);
	MakeWord	(0X11C1);
	MakeWord	(0X11C3);
	MakeWord	(0X11C5);
	MakeWord	(0X11C7);
	MakeWord	(0X11C9);
	MakeWord	(0X11CB);
	MakeWord	(0X11CD);
	MakeWord	(0X11CF);
	MakeWord	(0X11D1);
	MakeWord	(0X11D3);
	MakeWord	(0X11D5);
	MakeWord	(0X11D7);
	MakeWord	(0X11D9);
	MakeWord	(0X11DB);
	MakeWord	(0X11DD);
	MakeWord	(0X11DF);
	MakeWord	(0X11E1);
	MakeWord	(0X11E3);
	MakeWord	(0X11E5);
	MakeWord	(0X11E7);
	MakeWord	(0X11E9);
	MakeWord	(0X11EB);
	MakeWord	(0X11ED);
	MakeWord	(0X11EF);
	MakeWord	(0X11F1);
	MakeWord	(0X11F3);
	MakeWord	(0X11F5);
	MakeWord	(0X11F7);
	MakeWord	(0X11F9);
	MakeWord	(0X11FB);
	MakeWord	(0X11FD);
	MakeWord	(0X11FF);
	MakeWord	(0X1201);
	MakeWord	(0X1203);
	MakeWord	(0X1205);
	MakeWord	(0X1207);
	MakeWord	(0X1209);
	MakeWord	(0X120B);
	MakeWord	(0X120D);
	MakeWord	(0X120F);
	MakeWord	(0X1211);
	MakeWord	(0X1213);
	MakeWord	(0X1215);
	MakeWord	(0X1217);
	MakeWord	(0X1219);
	MakeWord	(0X121B);
	MakeWord	(0X121D);
	MakeWord	(0X121F);
	MakeWord	(0X1221);
	MakeWord	(0X1223);
	MakeWord	(0X1225);
	MakeWord	(0X1227);
	MakeWord	(0X1229);
	MakeWord	(0X122B);
	MakeWord	(0X122D);
	MakeWord	(0X122F);
	MakeWord	(0X1231);
	MakeByte	(0X1233);
	MakeName	(0X1233,	"t_YM_LEVELS");
	MakeRptCmt	(0X1234,	"this table contains the actual YM level values corresponding");
	MakeByte	(0X1234);
	MakeRptCmt	(0X1235,	"to the 16 possible values of the sound engine");
	MakeByte	(0X1235);
	MakeRptCmt	(0X1236,	"First value being almost YM's min level,");
	MakeByte	(0X1236);
	MakeRptCmt	(0X1237,	"and last value being almost YM's max level");
	MakeByte	(0X1237);
	MakeByte	(0X1238);
	MakeByte	(0X1239);
	MakeByte	(0X123A);
	MakeByte	(0X123B);
	MakeByte	(0X123C);
	MakeByte	(0X123D);
	MakeByte	(0X123E);
	MakeByte	(0X123F);
	MakeByte	(0X1240);
	MakeByte	(0X1241);
	MakeByte	(0X1242);
	MakeByte	(0X1243);
	MakeName	(0X1243,	"t_SLOTS_PER_ALGO");
	MakeByte	(0X1244);
	MakeRptCmt	(0X1245,	"table used to know which operators have to be affected by the channel's level");
	MakeByte	(0X1245);
	MakeRptCmt	(0X1246,	"bit 0 related to operator 1, bit 1 to operator 2 etc ...");
	MakeByte	(0X1246);
	MakeRptCmt	(0X1247,	"if 0, then operator is not a slot, so use the instrument's original level value");
	MakeByte	(0X1247);
	MakeRptCmt	(0X1248,	"if 1, then operator is a slot, so use channel level value");
	MakeByte	(0X1248);
	MakeByte	(0X1249);
	MakeByte	(0X124A);
	MakeRptCmt	(0X124B,	"The pitch effects mostly are vibratos, but also effects that make pitch go up or down indefinitely");
	MakeWord	(x=0X124B);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X124B,	"pt_PITCH_EFFECTS");
	MakeRptCmt	(0X124C,	"The pitch effects mostly are vibratos, but also effects that make pitch go up or down indefinitely");
	MakeWord	(x=0X124D);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X124F);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1251);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1253);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1255);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1257);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1259);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X125B);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X125D);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X125F);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1261);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1263);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1265);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1267);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1269);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X126B,	"vibrato 0 : nothing ! used to cancel a previous vibrato ?");
	MakeByte	(0X126B);
	MakeByte	(0X126C);
	MakeRptCmt	(0X126D,	"vibrato 1");
	MakeByte	(0X126D);
	MakeRptCmt	(0X126E,	"at each sound frame, the next data byte is added to the current frequency to slightly affect it");
	MakeByte	(0X126E);
	MakeByte	(0X126F);
	MakeByte	(0X1270);
	MakeRptCmt	(0X1271,	"value $80 means that it's end of data, so go back to the first byte of the pitch effect");
	MakeByte	(0X1271);
	MakeByte	(0X1272);
	MakeByte	(0X1273);
	MakeByte	(0X1274);
	MakeByte	(0X1275);
	MakeByte	(0X1276);
	MakeByte	(0X1277);
	MakeByte	(0X1278);
	MakeByte	(0X1279);
	MakeByte	(0X127A);
	MakeByte	(0X127B);
	MakeByte	(0X127C);
	MakeByte	(0X127D);
	MakeByte	(0X127E);
	MakeByte	(0X127F);
	MakeByte	(0X1280);
	MakeByte	(0X1281);
	MakeByte	(0X1282);
	MakeByte	(0X1283);
	MakeByte	(0X1284);
	MakeByte	(0X1285);
	MakeByte	(0X1286);
	MakeByte	(0X1287);
	MakeByte	(0X1288);
	MakeByte	(0X1289);
	MakeByte	(0X128A);
	MakeByte	(0X128B);
	MakeByte	(0X128C);
	MakeByte	(0X128D);
	MakeByte	(0X128E);
	MakeByte	(0X128F);
	MakeByte	(0X1290);
	MakeByte	(0X1291);
	MakeByte	(0X1292);
	MakeByte	(0X1293);
	MakeByte	(0X1294);
	MakeByte	(0X1295);
	MakeByte	(0X1296);
	MakeByte	(0X1297);
	MakeByte	(0X1298);
	MakeByte	(0X1299);
	MakeByte	(0X129A);
	MakeByte	(0X129B);
	MakeByte	(0X129C);
	MakeByte	(0X129D);
	MakeRptCmt	(0X129E,	"from here, the pitch effects are not vibratos, they just make the pitch constantly go up or down");
	MakeByte	(0X129E);
	MakeByte	(0X129F);
	MakeByte	(0X12A0);
	MakeByte	(0X12A1);
	MakeByte	(0X12A2);
	MakeByte	(0X12A3);
	MakeByte	(0X12A4);
	MakeByte	(0X12A5);
	MakeByte	(0X12A6);
	MakeByte	(0X12A7);
	MakeByte	(0X12A8);
	MakeByte	(0X12A9);
	MakeByte	(0X12AA);
	MakeByte	(0X12AB);
	MakeByte	(0X12AC);
	MakeByte	(0X12AD);
	MakeByte	(0X12AE);
	MakeByte	(0X12AF);
	MakeByte	(0X12B0);
	MakeByte	(0X12B1);
	MakeRptCmt	(0X12B2,	"The PSG instruments only affect the channel level");
	MakeWord	(x=0X12B2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X12B2,	"pt_PSG_INSTRUMENTS");
	MakeRptCmt	(0X12B4,	"more details about the data layout in psg-intruments.txt");
	MakeWord	(x=0X12B4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X12B6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X12B8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X12BA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X12BC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X12BE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X12C0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X12C2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X12C4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X12C6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X12C8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X12CA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X12CC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X12CE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X12D0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X12D2,	"start of data : instrument 0");
	MakeByte	(0X12D2);
	MakeByte	(0X12D3);
	MakeRptCmt	(0X12D4,	"instrument 1");
	MakeByte	(0X12D4);
	MakeByte	(0X12D5);
	MakeByte	(0X12D6);
	MakeByte	(0X12D7);
	MakeByte	(0X12D8);
	MakeByte	(0X12D9);
	MakeByte	(0X12DA);
	MakeByte	(0X12DB);
	MakeByte	(0X12DC);
	MakeByte	(0X12DD);
	MakeByte	(0X12DE);
	MakeByte	(0X12DF);
	MakeByte	(0X12E0);
	MakeByte	(0X12E1);
	MakeByte	(0X12E2);
	MakeByte	(0X12E3);
	MakeByte	(0X12E4);
	MakeByte	(0X12E5);
	MakeRptCmt	(0X12E6,	"instrument 2");
	MakeByte	(0X12E6);
	MakeByte	(0X12E7);
	MakeByte	(0X12E8);
	MakeByte	(0X12E9);
	MakeByte	(0X12EA);
	MakeByte	(0X12EB);
	MakeByte	(0X12EC);
	MakeByte	(0X12ED);
	MakeByte	(0X12EE);
	MakeByte	(0X12EF);
	MakeByte	(0X12F0);
	MakeByte	(0X12F1);
	MakeByte	(0X12F2);
	MakeByte	(0X12F3);
	MakeRptCmt	(0X12F4,	"instrument 3");
	MakeByte	(0X12F4);
	MakeByte	(0X12F5);
	MakeByte	(0X12F6);
	MakeByte	(0X12F7);
	MakeByte	(0X12F8);
	MakeByte	(0X12F9);
	MakeByte	(0X12FA);
	MakeByte	(0X12FB);
	MakeByte	(0X12FC);
	MakeByte	(0X12FD);
	MakeByte	(0X12FE);
	MakeByte	(0X12FF);
	MakeByte	(0X1300);
	MakeByte	(0X1301);
	MakeByte	(0X1302);
	MakeByte	(0X1303);
	MakeByte	(0X1304);
	MakeByte	(0X1305);
	MakeByte	(0X1306);
	MakeByte	(0X1307);
	MakeByte	(0X1308);
	MakeByte	(0X1309);
	MakeByte	(0X130A);
	MakeRptCmt	(0X130B,	"instrument 4");
	MakeByte	(0X130B);
	MakeByte	(0X130C);
	MakeByte	(0X130D);
	MakeByte	(0X130E);
	MakeByte	(0X130F);
	MakeByte	(0X1310);
	MakeByte	(0X1311);
	MakeRptCmt	(0X1312,	"instrument 5");
	MakeByte	(0X1312);
	MakeByte	(0X1313);
	MakeByte	(0X1314);
	MakeByte	(0X1315);
	MakeByte	(0X1316);
	MakeByte	(0X1317);
	MakeByte	(0X1318);
	MakeByte	(0X1319);
	MakeByte	(0X131A);
	MakeByte	(0X131B);
	MakeByte	(0X131C);
	MakeRptCmt	(0X131D,	"instrument 6");
	MakeByte	(0X131D);
	MakeByte	(0X131E);
	MakeByte	(0X131F);
	MakeByte	(0X1320);
	MakeByte	(0X1321);
	MakeByte	(0X1322);
	MakeByte	(0X1323);
	MakeByte	(0X1324);
	MakeRptCmt	(0X1325,	"instrument 7");
	MakeByte	(0X1325);
	MakeByte	(0X1326);
	MakeByte	(0X1327);
	MakeByte	(0X1328);
	MakeByte	(0X1329);
	MakeRptCmt	(0X132A,	"instrument 8");
	MakeByte	(0X132A);
	MakeByte	(0X132B);
	MakeByte	(0X132C);
	MakeByte	(0X132D);
	MakeByte	(0X132E);
	MakeByte	(0X132F);
	MakeByte	(0X1330);
	MakeByte	(0X1331);
	MakeByte	(0X1332);
	MakeByte	(0X1333);
	MakeByte	(0X1334);
	MakeByte	(0X1335);
	MakeByte	(0X1336);
	MakeByte	(0X1337);
	MakeRptCmt	(0X1338,	"instrument 9");
	MakeByte	(0X1338);
	MakeByte	(0X1339);
	MakeByte	(0X133A);
	MakeByte	(0X133B);
	MakeByte	(0X133C);
	MakeByte	(0X133D);
	MakeRptCmt	(0X133E,	"instrument A");
	MakeByte	(0X133E);
	MakeByte	(0X133F);
	MakeByte	(0X1340);
	MakeByte	(0X1341);
	MakeByte	(0X1342);
	MakeByte	(0X1343);
	MakeByte	(0X1344);
	MakeByte	(0X1345);
	MakeByte	(0X1346);
	MakeByte	(0X1347);
	MakeByte	(0X1348);
	MakeRptCmt	(0X1349,	"instrument B");
	MakeByte	(0X1349);
	MakeByte	(0X134A);
	MakeRptCmt	(0X134B,	"instrument C");
	MakeByte	(0X134B);
	MakeByte	(0X134C);
	MakeByte	(0X134D);
	MakeByte	(0X134E);
	MakeRptCmt	(0X134F,	"instrument D");
	MakeByte	(0X134F);
	MakeByte	(0X1350);
	MakeByte	(0X1351);
	MakeByte	(0X1352);
	MakeByte	(0X1353);
	MakeByte	(0X1354);
	MakeRptCmt	(0X1355,	"instrument E");
	MakeByte	(0X1355);
	MakeByte	(0X1356);
	MakeByte	(0X1357);
	MakeByte	(0X1358);
	MakeByte	(0X1359);
	MakeByte	(0X135A);
	MakeByte	(0X135B);
	MakeByte	(0X135C);
	MakeRptCmt	(0X135D,	"instrument F");
	MakeByte	(0X135D);
	MakeRptCmt	(0X135E,	"end of data");
	MakeByte	(0X135E);
	MakeByte	(0X135F);
	MakeArray	(0X135F,	0X21);
	MakeByte	(0X1380);
	MakeName	(0X1380,	"YM_CHANNEL_DATA_1");
	MakeRptCmt	(0X1381,	"from this point starts the several RAM areas dedicated to temporary channel data, like note timers, data pointers ...");
	MakeByte	(0X1381);
	MakeRptCmt	(0X1382,	"more details in channel-ram-data.txt");
	MakeByte	(0X1382);
	MakeRptCmt	(0X1383,	"also pointed once from 68k, to know if music/sfx is currently being played, I guess");
	MakeByte	(0X1383);
	MakeName	(0X1383,	"YM_CHANNEL_1_NOT_IN_USE");
	MakeByte	(0X1384);
	MakeByte	(0X1385);
	MakeByte	(0X1386);
	MakeByte	(0X1387);
	MakeByte	(0X1388);
	MakeByte	(0X1389);
	MakeByte	(0X138A);
	MakeByte	(0X138B);
	MakeByte	(0X138C);
	MakeByte	(0X138D);
	MakeByte	(0X138E);
	MakeByte	(0X138F);
	MakeByte	(0X1390);
	MakeByte	(0X1391);
	MakeByte	(0X1392);
	MakeByte	(0X1393);
	MakeByte	(0X1394);
	MakeByte	(0X1395);
	MakeByte	(0X1396);
	MakeByte	(0X1397);
	MakeByte	(0X1398);
	MakeByte	(0X1399);
	MakeByte	(0X139A);
	MakeByte	(0X139B);
	MakeByte	(0X139C);
	MakeByte	(0X139D);
	MakeByte	(0X139E);
	MakeByte	(0X139F);
	MakeByte	(0X13A0);
	MakeName	(0X13A0,	"YM_CHANNEL_DATA_2");
	MakeByte	(0X13A1);
	MakeByte	(0X13A2);
	MakeByte	(0X13A3);
	MakeByte	(0X13A4);
	MakeByte	(0X13A5);
	MakeByte	(0X13A6);
	MakeByte	(0X13A7);
	MakeByte	(0X13A8);
	MakeByte	(0X13A9);
	MakeByte	(0X13AA);
	MakeByte	(0X13AB);
	MakeByte	(0X13AC);
	MakeByte	(0X13AD);
	MakeByte	(0X13AE);
	MakeByte	(0X13AF);
	MakeByte	(0X13B0);
	MakeByte	(0X13B1);
	MakeByte	(0X13B2);
	MakeByte	(0X13B3);
	MakeByte	(0X13B4);
	MakeByte	(0X13B5);
	MakeByte	(0X13B6);
	MakeByte	(0X13B7);
	MakeByte	(0X13B8);
	MakeByte	(0X13B9);
	MakeByte	(0X13BA);
	MakeByte	(0X13BB);
	MakeByte	(0X13BC);
	MakeByte	(0X13BD);
	MakeByte	(0X13BE);
	MakeByte	(0X13BF);
	MakeByte	(0X13C0);
	MakeName	(0X13C0,	"YM_CHANNEL_DATA_3");
	MakeByte	(0X13C1);
	MakeByte	(0X13C2);
	MakeByte	(0X13C3);
	MakeByte	(0X13C4);
	MakeByte	(0X13C5);
	MakeByte	(0X13C6);
	MakeByte	(0X13C7);
	MakeByte	(0X13C8);
	MakeByte	(0X13C9);
	MakeByte	(0X13CA);
	MakeByte	(0X13CB);
	MakeByte	(0X13CC);
	MakeByte	(0X13CD);
	MakeByte	(0X13CE);
	MakeByte	(0X13CF);
	MakeByte	(0X13D0);
	MakeByte	(0X13D1);
	MakeByte	(0X13D2);
	MakeByte	(0X13D3);
	MakeByte	(0X13D4);
	MakeByte	(0X13D5);
	MakeByte	(0X13D6);
	MakeByte	(0X13D7);
	MakeByte	(0X13D8);
	MakeByte	(0X13D9);
	MakeByte	(0X13DA);
	MakeByte	(0X13DB);
	MakeByte	(0X13DC);
	MakeByte	(0X13DD);
	MakeByte	(0X13DE);
	MakeByte	(0X13DF);
	MakeByte	(0X13E0);
	MakeName	(0X13E0,	"YM_CHANNEL_DATA_4");
	MakeByte	(0X13E1);
	MakeByte	(0X13E2);
	MakeByte	(0X13E3);
	MakeByte	(0X13E4);
	MakeByte	(0X13E5);
	MakeByte	(0X13E6);
	MakeByte	(0X13E7);
	MakeByte	(0X13E8);
	MakeByte	(0X13E9);
	MakeByte	(0X13EA);
	MakeByte	(0X13EB);
	MakeByte	(0X13EC);
	MakeByte	(0X13ED);
	MakeByte	(0X13EE);
	MakeByte	(0X13EF);
	MakeByte	(0X13F0);
	MakeByte	(0X13F1);
	MakeByte	(0X13F2);
	MakeByte	(0X13F3);
	MakeByte	(0X13F4);
	MakeByte	(0X13F5);
	MakeByte	(0X13F6);
	MakeByte	(0X13F7);
	MakeByte	(0X13F8);
	MakeByte	(0X13F9);
	MakeByte	(0X13FA);
	MakeByte	(0X13FB);
	MakeByte	(0X13FC);
	MakeByte	(0X13FD);
	MakeByte	(0X13FE);
	MakeName	(0X13FE,	"YM_CHANNEL_4_STEREO");
	MakeByte	(0X13FF);
	MakeByte	(0X1400);
	MakeName	(0X1400,	"YM_CHANNEL_DATA_5");
	MakeByte	(0X1401);
	MakeByte	(0X1402);
	MakeByte	(0X1403);
	MakeByte	(0X1404);
	MakeByte	(0X1405);
	MakeByte	(0X1406);
	MakeByte	(0X1407);
	MakeByte	(0X1408);
	MakeByte	(0X1409);
	MakeByte	(0X140A);
	MakeByte	(0X140B);
	MakeByte	(0X140C);
	MakeByte	(0X140D);
	MakeByte	(0X140E);
	MakeByte	(0X140F);
	MakeByte	(0X1410);
	MakeByte	(0X1411);
	MakeByte	(0X1412);
	MakeByte	(0X1413);
	MakeByte	(0X1414);
	MakeByte	(0X1415);
	MakeByte	(0X1416);
	MakeByte	(0X1417);
	MakeByte	(0X1418);
	MakeByte	(0X1419);
	MakeByte	(0X141A);
	MakeByte	(0X141B);
	MakeByte	(0X141C);
	MakeByte	(0X141D);
	MakeByte	(0X141E);
	MakeName	(0X141E,	"YM_CHANNEL_5_STEREO");
	MakeByte	(0X141F);
	MakeByte	(0X1420);
	MakeName	(0X1420,	"YM_CHANNEL_DATA_6");
	MakeByte	(0X1421);
	MakeByte	(0X1422);
	MakeByte	(0X1423);
	MakeByte	(0X1424);
	MakeByte	(0X1425);
	MakeByte	(0X1426);
	MakeByte	(0X1427);
	MakeByte	(0X1428);
	MakeByte	(0X1429);
	MakeByte	(0X142A);
	MakeByte	(0X142B);
	MakeByte	(0X142C);
	MakeByte	(0X142D);
	MakeByte	(0X142E);
	MakeByte	(0X142F);
	MakeByte	(0X1430);
	MakeByte	(0X1431);
	MakeByte	(0X1432);
	MakeByte	(0X1433);
	MakeByte	(0X1434);
	MakeByte	(0X1435);
	MakeByte	(0X1436);
	MakeByte	(0X1437);
	MakeByte	(0X1438);
	MakeByte	(0X1439);
	MakeByte	(0X143A);
	MakeByte	(0X143B);
	MakeByte	(0X143C);
	MakeByte	(0X143D);
	MakeByte	(0X143E);
	MakeName	(0X143E,	"YM_CHANNEL_6_STEREO");
	MakeByte	(0X143F);
	MakeByte	(0X1440);
	MakeName	(0X1440,	"PSG_CHANNEL_DATA_TONE_1");
	MakeByte	(0X1441);
	MakeByte	(0X1442);
	MakeByte	(0X1443);
	MakeByte	(0X1444);
	MakeByte	(0X1445);
	MakeByte	(0X1446);
	MakeByte	(0X1447);
	MakeByte	(0X1448);
	MakeByte	(0X1449);
	MakeByte	(0X144A);
	MakeByte	(0X144B);
	MakeByte	(0X144C);
	MakeByte	(0X144D);
	MakeByte	(0X144E);
	MakeByte	(0X144F);
	MakeByte	(0X1450);
	MakeByte	(0X1451);
	MakeByte	(0X1452);
	MakeByte	(0X1453);
	MakeByte	(0X1454);
	MakeByte	(0X1455);
	MakeByte	(0X1456);
	MakeByte	(0X1457);
	MakeByte	(0X1458);
	MakeByte	(0X1459);
	MakeByte	(0X145A);
	MakeByte	(0X145B);
	MakeByte	(0X145C);
	MakeByte	(0X145D);
	MakeByte	(0X145E);
	MakeByte	(0X145F);
	MakeByte	(0X1460);
	MakeByte	(0X1461);
	MakeByte	(0X1462);
	MakeByte	(0X1463);
	MakeByte	(0X1464);
	MakeByte	(0X1465);
	MakeByte	(0X1466);
	MakeByte	(0X1467);
	MakeByte	(0X1468);
	MakeByte	(0X1469);
	MakeByte	(0X146A);
	MakeByte	(0X146B);
	MakeByte	(0X146C);
	MakeByte	(0X146D);
	MakeByte	(0X146E);
	MakeByte	(0X146F);
	MakeByte	(0X1470);
	MakeByte	(0X1471);
	MakeByte	(0X1472);
	MakeByte	(0X1473);
	MakeByte	(0X1474);
	MakeByte	(0X1475);
	MakeByte	(0X1476);
	MakeByte	(0X1477);
	MakeByte	(0X1478);
	MakeByte	(0X1479);
	MakeByte	(0X147A);
	MakeByte	(0X147B);
	MakeByte	(0X147C);
	MakeByte	(0X147D);
	MakeByte	(0X147E);
	MakeByte	(0X147F);
	MakeByte	(0X1480);
	MakeByte	(0X1481);
	MakeByte	(0X1482);
	MakeByte	(0X1483);
	MakeByte	(0X1484);
	MakeByte	(0X1485);
	MakeByte	(0X1486);
	MakeByte	(0X1487);
	MakeByte	(0X1488);
	MakeByte	(0X1489);
	MakeByte	(0X148A);
	MakeByte	(0X148B);
	MakeByte	(0X148C);
	MakeByte	(0X148D);
	MakeByte	(0X148E);
	MakeByte	(0X148F);
	MakeByte	(0X1490);
	MakeByte	(0X1491);
	MakeByte	(0X1492);
	MakeByte	(0X1493);
	MakeByte	(0X1494);
	MakeByte	(0X1495);
	MakeByte	(0X1496);
	MakeByte	(0X1497);
	MakeByte	(0X1498);
	MakeByte	(0X1499);
	MakeByte	(0X149A);
	MakeByte	(0X149B);
	MakeByte	(0X149C);
	MakeByte	(0X149D);
	MakeByte	(0X149E);
	MakeByte	(0X149F);
	MakeByte	(0X14A0);
	MakeName	(0X14A0,	"PSG_CHANNEL_DATA_NOISE");
	MakeByte	(0X14A1);
	MakeByte	(0X14A2);
	MakeByte	(0X14A3);
	MakeByte	(0X14A4);
	MakeByte	(0X14A5);
	MakeByte	(0X14A6);
	MakeByte	(0X14A7);
	MakeByte	(0X14A8);
	MakeByte	(0X14A9);
	MakeByte	(0X14AA);
	MakeByte	(0X14AB);
	MakeByte	(0X14AC);
	MakeByte	(0X14AD);
	MakeByte	(0X14AE);
	MakeByte	(0X14AF);
	MakeByte	(0X14B0);
	MakeByte	(0X14B1);
	MakeByte	(0X14B2);
	MakeByte	(0X14B3);
	MakeByte	(0X14B4);
	MakeByte	(0X14B5);
	MakeByte	(0X14B6);
	MakeByte	(0X14B7);
	MakeByte	(0X14B8);
	MakeByte	(0X14B9);
	MakeByte	(0X14BA);
	MakeByte	(0X14BB);
	MakeByte	(0X14BC);
	MakeByte	(0X14BD);
	MakeByte	(0X14BE);
	MakeByte	(0X14BF);
	MakeByte	(0X14C0);
	MakeName	(0X14C0,	"SFX_TYPE_2_CHANNEL_DATA_1");
	MakeByte	(0X14C1);
	MakeByte	(0X14C2);
	MakeByte	(0X14C3);
	MakeName	(0X14C3,	"SFX_TYPE_2_CHANNEL_1_NOT_IN_USE");
	MakeByte	(0X14C4);
	MakeByte	(0X14C5);
	MakeByte	(0X14C6);
	MakeByte	(0X14C7);
	MakeByte	(0X14C8);
	MakeByte	(0X14C9);
	MakeByte	(0X14CA);
	MakeByte	(0X14CB);
	MakeByte	(0X14CC);
	MakeByte	(0X14CD);
	MakeByte	(0X14CE);
	MakeByte	(0X14CF);
	MakeByte	(0X14D0);
	MakeByte	(0X14D1);
	MakeByte	(0X14D2);
	MakeByte	(0X14D3);
	MakeByte	(0X14D4);
	MakeByte	(0X14D5);
	MakeByte	(0X14D6);
	MakeByte	(0X14D7);
	MakeByte	(0X14D8);
	MakeByte	(0X14D9);
	MakeByte	(0X14DA);
	MakeByte	(0X14DB);
	MakeByte	(0X14DC);
	MakeByte	(0X14DD);
	MakeByte	(0X14DE);
	MakeByte	(0X14DF);
	MakeByte	(0X14E0);
	MakeName	(0X14E0,	"SFX_TYPE_2_CHANNEL_DATA_2");
	MakeByte	(0X14E1);
	MakeByte	(0X14E2);
	MakeByte	(0X14E3);
	MakeName	(0X14E3,	"SFX_TYPE_2_CHANNEL_2_NOT_IN_USE");
	MakeByte	(0X14E4);
	MakeByte	(0X14E5);
	MakeByte	(0X14E6);
	MakeByte	(0X14E7);
	MakeByte	(0X14E8);
	MakeByte	(0X14E9);
	MakeByte	(0X14EA);
	MakeByte	(0X14EB);
	MakeByte	(0X14EC);
	MakeByte	(0X14ED);
	MakeByte	(0X14EE);
	MakeByte	(0X14EF);
	MakeByte	(0X14F0);
	MakeByte	(0X14F1);
	MakeByte	(0X14F2);
	MakeByte	(0X14F3);
	MakeByte	(0X14F4);
	MakeByte	(0X14F5);
	MakeByte	(0X14F6);
	MakeByte	(0X14F7);
	MakeByte	(0X14F8);
	MakeByte	(0X14F9);
	MakeByte	(0X14FA);
	MakeByte	(0X14FB);
	MakeByte	(0X14FC);
	MakeByte	(0X14FD);
	MakeByte	(0X14FE);
	MakeByte	(0X14FF);
	MakeByte	(0X1500);
	MakeByte	(0X1501);
	MakeByte	(0X1502);
	MakeByte	(0X1503);
	MakeName	(0X1503,	"SFX_TYPE_2_CHANNEL_3_NOT_IN_USE");
	MakeByte	(0X1504);
	MakeByte	(0X1505);
	MakeByte	(0X1506);
	MakeByte	(0X1507);
	MakeByte	(0X1508);
	MakeByte	(0X1509);
	MakeByte	(0X150A);
	MakeByte	(0X150B);
	MakeByte	(0X150C);
	MakeByte	(0X150D);
	MakeByte	(0X150E);
	MakeByte	(0X150F);
	MakeByte	(0X1510);
	MakeByte	(0X1511);
	MakeByte	(0X1512);
	MakeByte	(0X1513);
	MakeByte	(0X1514);
	MakeByte	(0X1515);
	MakeByte	(0X1516);
	MakeByte	(0X1517);
	MakeByte	(0X1518);
	MakeByte	(0X1519);
	MakeByte	(0X151A);
	MakeByte	(0X151B);
	MakeByte	(0X151C);
	MakeByte	(0X151D);
	MakeByte	(0X151E);
	MakeByte	(0X151F);
	MakeRptCmt	(0X1520,	"incremented each time new stereo byte has bit 0 set to 1, but actually has no effect on sound. Useless !");
	MakeByte	(0X1520);
	MakeName	(0X1520,	"USELESS_BYTE");
	MakeRptCmt	(0X1521,	"current PSG channel to process, stored in the right bits ready to be sent to PSG");
	MakeByte	(0X1521);
	MakeName	(0X1521,	"CURRENT_PSG_CHANNEL");
	MakeRptCmt	(0X1522,	"indicates the channel to process, from a relative point of view : YM1, YM2, PSG or SFX channels");
	MakeByte	(0X1522);
	MakeName	(0X1522,	"CURRENT_CHANNEL");
	MakeRptCmt	(0X1523,	"set to 01 when a fade out operation is being executed");
	MakeByte	(0X1523);
	MakeName	(0X1523,	"CURRENTLY_FADING_OUT");
	MakeByte	(0X1524);
	MakeRptCmt	(0X1525,	"set to $01 when managing YM4,5,6 channels, to call part 2 of YM");
	MakeByte	(0X1525);
	MakeName	(0X1525,	"CALL_YM2_INSTEAD_OF_YM1");
	MakeRptCmt	(0X1526,	"indicates if an SFX type 2 is being processed, because these ones use extra channel ram areas, to keep current music data for when SFX is finished");
	MakeByte	(0X1526);
	MakeName	(0X1526,	"CURRENTLY_MANAGING_SFX_TYPE_2");
	MakeRptCmt	(0X1527,	"number of YM Timer overflows to handle before incrementing the fade out counter");
	MakeByte	(0X1527);
	MakeName	(0X1527,	"FADE_OUT_LENGTH");
	MakeRptCmt	(0X1528,	"Starts with fade out length value, decrements at each YM Timer overflow. set to $63 while loading music");
	MakeByte	(0X1528);
	MakeName	(0X1528,	"FADE_OUT_TIMER");
	MakeRptCmt	(0X1529,	"Counts how many times the fade out timer reached 0. Fade out stops at value $0C.");
	MakeByte	(0X1529);
	MakeName	(0X1529,	"FADE_OUT_COUNTER");
	MakeByte	(0X152C);
	MakeName	(0X152C,	"BANK_TO_LOAD");
	MakeByte	(0X152D);
	MakeName	(0X152D,	"MUSIC_BANK_TO_LOAD");
	MakeRptCmt	(0X152E,	"3-Channel SFX are not loaded if this byte is less than byte 0x1FFE. Which can't happen at all ! So don't care about it.");
	MakeByte	(0X152E);
	MakeName	(0X152E,	"SFX_USELESS_BYTE_2");
	MakeRptCmt	(0X1530,	"temp space to store frequency values when YM data is parsed");
	MakeWord	(0X1530);
	MakeName	(0X1530,	"TEMP_FREQUENCY");
	MakeRptCmt	(0X1532,	"temp place to keep a register value when an YM instrument is loaded");
	MakeByte	(0X1532);
	MakeName	(0X1532,	"TEMP_REGISTER");
	MakeRptCmt	(0X1533,	"incremented at each YM Timer overflow. When it corresponds to fade in parameter, increment YM instruments level until max level");
	MakeByte	(0X1533);
	MakeName	(0X1533,	"FADE_IN_TIMER");
	MakeByte	(0X1534);
	MakeName	(0X1534,	"MUSIC_DOESNT_USE_SAMPLES");
	MakeComm	(0X1535,	"Data layout of the 8-byte entries :\nbyte 0 : PCM frame period parameter\nbyte 1 : always 0 (ignored when data is parsed)\nbyte 2 : bank to load\nbyte 3 : always 0 (ignored when data is parsed)\nbytes 5-4 : sample length\nbytes 7-6 : pointer to sound PCM Data once bank is loaded\n\nWith this table, the same sound sample can be played at different rates,\nresulting with quick high-pitched, or slow low-pitched sounds, \nwhich is quite appropriate for drums or attack hits or explosions !");
	MakeByte	(0X1535);
	MakeArray	(0X1535,	0X88);
	MakeName	(0X1535,	"t_SAMPLE_LOAD_DATA");
	MakeComm	(0X15BC,	"Data layout of the 8-byte entries :\nbyte 0 : PCM frame period parameter\nbyte 1 : always 0 (ignored when data is parsed)\nbyte 2 : bank to load\nbyte 3 : always 0 (ignored when data is parsed)\nbytes 5-4 : sample length\nbytes 7-6 : pointer to sound PCM Data once bank is loaded\n\nWith this table, the same sound sample can be played at different rates,\nresulting with quick high-pitched, or slow low-pitched sounds, \nwhich is quite appropriate for drums or attack hits or explosions !");
	MakeRptCmt	(0X15BD,	"SFX pointer table\n\nmore details about them in sfx.txt");
	MakeWord	(x=0X15BD);
	MakeArray	(x,	0X38);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X15BD,	"pt_SFX");
	MakeRptCmt	(0X15BE,	"SFX pointer table\n\nmore details about them in sfx.txt");
	MakeRptCmt	(0X15C0,	"SFX pointer table\n\nmore details about them in sfx.txt");
	MakeRptCmt	(0X15C2,	"SFX pointer table\n\nmore details about them in sfx.txt");
	MakeRptCmt	(0X15C4,	"SFX pointer table\n\nmore details about them in sfx.txt");
	MakeRptCmt	(0X15C6,	"SFX pointer table\n\nmore details about them in sfx.txt");
	MakeRptCmt	(0X15C8,	"SFX pointer table\n\nmore details about them in sfx.txt");
	MakeRptCmt	(0X15CA,	"SFX pointer table\n\nmore details about them in sfx.txt");
	MakeRptCmt	(0X15CC,	"SFX pointer table\n\nmore details about them in sfx.txt");
	MakeRptCmt	(0X15CE,	"SFX pointer table\n\nmore details about them in sfx.txt");
	MakeRptCmt	(0X15D0,	"SFX pointer table\n\nmore details about them in sfx.txt");
	MakeRptCmt	(0X15D2,	"SFX pointer table\n\nmore details about them in sfx.txt");
	MakeRptCmt	(0X15D4,	"SFX pointer table\n\nmore details about them in sfx.txt");
	MakeRptCmt	(0X15D6,	"SFX pointer table\n\nmore details about them in sfx.txt");
	MakeRptCmt	(0X15D8,	"SFX pointer table\n\nmore details about them in sfx.txt");
	MakeRptCmt	(0X15DA,	"SFX pointer table\n\nmore details about them in sfx.txt");
	MakeRptCmt	(0X15DC,	"SFX pointer table\n\nmore details about them in sfx.txt");
	MakeRptCmt	(0X15DE,	"SFX pointer table\n\nmore details about them in sfx.txt");
	MakeRptCmt	(0X15E0,	"SFX pointer table\n\nmore details about them in sfx.txt");
	MakeRptCmt	(0X15E2,	"SFX pointer table\n\nmore details about them in sfx.txt");
	MakeRptCmt	(0X15E4,	"SFX pointer table\n\nmore details about them in sfx.txt");
	MakeRptCmt	(0X15E6,	"SFX pointer table\n\nmore details about them in sfx.txt");
	MakeRptCmt	(0X15E8,	"SFX pointer table\n\nmore details about them in sfx.txt");
	MakeRptCmt	(0X15EA,	"SFX pointer table\n\nmore details about them in sfx.txt");
	MakeRptCmt	(0X15EC,	"SFX pointer table\n\nmore details about them in sfx.txt");
	MakeRptCmt	(0X15EE,	"SFX pointer table\n\nmore details about them in sfx.txt");
	MakeRptCmt	(0X15F0,	"SFX pointer table\n\nmore details about them in sfx.txt");
	MakeRptCmt	(0X162B,	"SFX pointer table\n\nmore details about them in sfx.txt");
	MakeRptCmt	(0X162C,	"SFX pointer table\n\nmore details about them in sfx.txt");
	MakeRptCmt	(0X162D,	"sound 1 data");
	MakeByte	(0X162D);
	MakeName	(0X162D,	"sfx_01");
	MakeWord	(x=0X162E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1630);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1632);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X1634);
	MakeArray	(0X1634,	0X16);
	MakeByte	(0X164A);
	MakeByte	(0X164B);
	MakeByte	(0X164C);
	MakeRptCmt	(0X164D,	"sound 2");
	MakeByte	(0X164D);
	MakeName	(0X164D,	"sfx_02");
	MakeWord	(x=0X164E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1650);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1652);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1654);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1656);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1658);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X165A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X165C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X165E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1660);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X1662);
	MakeByte	(0X1663);
	MakeByte	(0X1664);
	MakeByte	(0X1665);
	MakeByte	(0X1666);
	MakeByte	(0X1667);
	MakeByte	(0X1668);
	MakeByte	(0X1669);
	MakeByte	(0X166A);
	MakeByte	(0X166B);
	MakeByte	(0X166C);
	MakeByte	(0X166D);
	MakeByte	(0X166E);
	MakeByte	(0X166F);
	MakeByte	(0X1670);
	MakeByte	(0X1671);
	MakeByte	(0X1672);
	MakeByte	(0X1673);
	MakeByte	(0X1674);
	MakeRptCmt	(0X1675,	"sound 3");
	MakeByte	(0X1675);
	MakeName	(0X1675,	"sfx_03");
	MakeWord	(x=0X1676);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1678);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X167A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X167C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X167E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1680);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1682);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1684);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1686);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1688);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X168A);
	MakeByte	(0X168B);
	MakeByte	(0X168C);
	MakeByte	(0X168D);
	MakeByte	(0X168E);
	MakeByte	(0X168F);
	MakeByte	(0X1690);
	MakeByte	(0X1691);
	MakeByte	(0X1692);
	MakeByte	(0X1693);
	MakeByte	(0X1694);
	MakeByte	(0X1695);
	MakeByte	(0X1696);
	MakeByte	(0X1697);
	MakeByte	(0X1698);
	MakeByte	(0X1699);
	MakeByte	(0X169A);
	MakeByte	(0X169B);
	MakeByte	(0X169C);
	MakeByte	(0X169D);
	MakeByte	(0X169E);
	MakeByte	(0X169F);
	MakeByte	(0X16A0);
	MakeByte	(0X16A1);
	MakeByte	(0X16A2);
	MakeByte	(0X16A3);
	MakeByte	(0X16A4);
	MakeByte	(0X16A5);
	MakeByte	(0X16A6);
	MakeByte	(0X16A7);
	MakeByte	(0X16A8);
	MakeRptCmt	(0X16A9,	"sound 4");
	MakeByte	(0X16A9);
	MakeName	(0X16A9,	"sfx_04");
	MakeWord	(x=0X16AA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X16AC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X16AE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X16B0);
	MakeByte	(0X16B1);
	MakeByte	(0X16B2);
	MakeByte	(0X16B3);
	MakeByte	(0X16B4);
	MakeByte	(0X16B5);
	MakeByte	(0X16B6);
	MakeByte	(0X16B7);
	MakeByte	(0X16B8);
	MakeByte	(0X16B9);
	MakeByte	(0X16BA);
	MakeByte	(0X16BB);
	MakeByte	(0X16BC);
	MakeByte	(0X16BD);
	MakeByte	(0X16BE);
	MakeByte	(0X16BF);
	MakeByte	(0X16C0);
	MakeByte	(0X16C1);
	MakeByte	(0X16C2);
	MakeByte	(0X16C3);
	MakeByte	(0X16C4);
	MakeByte	(0X16C5);
	MakeByte	(0X16C6);
	MakeByte	(0X16C7);
	MakeByte	(0X16C8);
	MakeByte	(0X16C9);
	MakeByte	(0X16CA);
	MakeRptCmt	(0X16CB,	"sound 5");
	MakeByte	(0X16CB);
	MakeName	(0X16CB,	"sfx_05");
	MakeWord	(x=0X16CC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X16CE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X16D0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X16D2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X16D4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X16D6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X16D8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X16DA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X16DC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X16DE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X16E0,	"sound 6");
	MakeByte	(0X16E0);
	MakeName	(0X16E0,	"sfx_06");
	MakeWord	(x=0X16E1);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X16E3);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X16E5);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X16E7);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X16E9);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X16EB);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X16ED);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X16EF);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X16F1);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X16F3);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X16F5,	"sound 7");
	MakeByte	(0X16F5);
	MakeName	(0X16F5,	"sfx_07");
	MakeWord	(x=0X16F6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X16F8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X16FA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X16FC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X16FE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1700);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1702);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1704);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1706);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1708);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X170A,	"sound 8");
	MakeByte	(0X170A);
	MakeName	(0X170A,	"sfx_08");
	MakeWord	(x=0X170B);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X170D);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X170F);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1711);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1713);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1715);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1717);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1719);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X171B);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X171D);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X171F,	"sound 9");
	MakeByte	(0X171F);
	MakeName	(0X171F,	"sfx_09");
	MakeWord	(x=0X1720);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1722);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1724);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1726);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1728);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X172A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X172C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X172E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1730);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1732);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X1734,	"sound A");
	MakeByte	(0X1734);
	MakeName	(0X1734,	"sfx_0A");
	MakeWord	(x=0X1735);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1737);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1739);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X173B);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X173D);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X173F);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1741);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1743);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1745);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1747);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X1749,	"sound B");
	MakeByte	(0X1749);
	MakeName	(0X1749,	"sfx_0B");
	MakeWord	(x=0X174A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X174C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X174E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1750);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1752);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1754);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1756);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1758);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X175A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X175C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X175E,	"sound C");
	MakeByte	(0X175E);
	MakeName	(0X175E,	"sfx_0C");
	MakeWord	(x=0X175F);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1761);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1763);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1765);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1767);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1769);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X176B);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X176D);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X176F);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1771);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X1773);
	MakeByte	(0X1774);
	MakeByte	(0X1775);
	MakeByte	(0X1776);
	MakeByte	(0X1777);
	MakeByte	(0X1778);
	MakeByte	(0X1779);
	MakeByte	(0X177A);
	MakeByte	(0X177B);
	MakeByte	(0X177C);
	MakeByte	(0X177D);
	MakeByte	(0X177E);
	MakeByte	(0X177F);
	MakeByte	(0X1780);
	MakeByte	(0X1781);
	MakeByte	(0X1782);
	MakeByte	(0X1783);
	MakeByte	(0X1784);
	MakeByte	(0X1785);
	MakeByte	(0X1786);
	MakeByte	(0X1787);
	MakeByte	(0X1788);
	MakeByte	(0X1789);
	MakeByte	(0X178A);
	MakeByte	(0X178B);
	MakeByte	(0X178C);
	MakeByte	(0X178D);
	MakeByte	(0X178E);
	MakeByte	(0X178F);
	MakeByte	(0X1790);
	MakeByte	(0X1791);
	MakeByte	(0X1792);
	MakeByte	(0X1793);
	MakeByte	(0X1794);
	MakeByte	(0X1795);
	MakeByte	(0X1796);
	MakeByte	(0X1797);
	MakeByte	(0X1798);
	MakeByte	(0X1799);
	MakeByte	(0X179A);
	MakeByte	(0X179B);
	MakeByte	(0X179C);
	MakeByte	(0X179D);
	MakeByte	(0X179E);
	MakeByte	(0X179F);
	MakeByte	(0X17A0);
	MakeByte	(0X17A1);
	MakeByte	(0X17A2);
	MakeByte	(0X17A3);
	MakeByte	(0X17A4);
	MakeByte	(0X17A5);
	MakeByte	(0X17A6);
	MakeByte	(0X17A7);
	MakeByte	(0X17A8);
	MakeByte	(0X17A9);
	MakeByte	(0X17AA);
	MakeByte	(0X17AB);
	MakeByte	(0X17AC);
	MakeByte	(0X17AD);
	MakeByte	(0X17AE);
	MakeByte	(0X17AF);
	MakeByte	(0X17B0);
	MakeByte	(0X17B1);
	MakeByte	(0X17B2);
	MakeByte	(0X17B3);
	MakeByte	(0X17B4);
	MakeByte	(0X17B5);
	MakeByte	(0X17B6);
	MakeByte	(0X17B7);
	MakeByte	(0X17B8);
	MakeByte	(0X17B9);
	MakeByte	(0X17BA);
	MakeByte	(0X17BB);
	MakeByte	(0X17BC);
	MakeByte	(0X17BD);
	MakeByte	(0X17BE);
	MakeByte	(0X17BF);
	MakeByte	(0X17C0);
	MakeByte	(0X17C1);
	MakeByte	(0X17C2);
	MakeByte	(0X17C3);
	MakeByte	(0X17C4);
	MakeByte	(0X17C5);
	MakeByte	(0X17C6);
	MakeByte	(0X17C7);
	MakeByte	(0X17C8);
	MakeByte	(0X17C9);
	MakeByte	(0X17CA);
	MakeRptCmt	(0X17CB,	"sound D");
	MakeByte	(0X17CB);
	MakeName	(0X17CB,	"sfx_0D");
	MakeWord	(x=0X17CC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X17CE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X17D0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X17D2);
	MakeByte	(0X17D3);
	MakeByte	(0X17D4);
	MakeByte	(0X17D5);
	MakeByte	(0X17D6);
	MakeByte	(0X17D7);
	MakeByte	(0X17D8);
	MakeByte	(0X17D9);
	MakeByte	(0X17DA);
	MakeByte	(0X17DB);
	MakeByte	(0X17DC);
	MakeByte	(0X17DD);
	MakeByte	(0X17DE);
	MakeByte	(0X17DF);
	MakeByte	(0X17E0);
	MakeByte	(0X17E1);
	MakeByte	(0X17E2);
	MakeByte	(0X17E3);
	MakeByte	(0X17E4);
	MakeByte	(0X17E5);
	MakeByte	(0X17E6);
	MakeByte	(0X17E7);
	MakeByte	(0X17E8);
	MakeByte	(0X17E9);
	MakeByte	(0X17EA);
	MakeByte	(0X17EB);
	MakeByte	(0X17EC);
	MakeByte	(0X17ED);
	MakeByte	(0X17EE);
	MakeByte	(0X17EF);
	MakeByte	(0X17F0);
	MakeByte	(0X17F1);
	MakeByte	(0X17F2);
	MakeByte	(0X17F3);
	MakeByte	(0X17F4);
	MakeByte	(0X17F5);
	MakeRptCmt	(0X17F6,	"sound 15");
	MakeByte	(0X17F6);
	MakeName	(0X17F6,	"sfx_15");
	MakeWord	(x=0X17F7);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X17F9);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X17FB);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X17FD);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X17FF);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1801);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1803);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1805);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1807);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1809);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X180B);
	MakeByte	(0X180C);
	MakeByte	(0X180D);
	MakeByte	(0X180E);
	MakeByte	(0X180F);
	MakeByte	(0X1810);
	MakeByte	(0X1811);
	MakeByte	(0X1812);
	MakeByte	(0X1813);
	MakeByte	(0X1814);
	MakeByte	(0X1815);
	MakeByte	(0X1816);
	MakeByte	(0X1817);
	MakeByte	(0X1818);
	MakeByte	(0X1819);
	MakeByte	(0X181A);
	MakeByte	(0X181B);
	MakeByte	(0X181C);
	MakeByte	(0X181D);
	MakeByte	(0X181E);
	MakeRptCmt	(0X181F,	"sound 16");
	MakeByte	(0X181F);
	MakeName	(0X181F,	"sfx_16");
	MakeWord	(x=0X1820);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1822);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1824);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X1826);
	MakeByte	(0X1827);
	MakeByte	(0X1828);
	MakeByte	(0X1829);
	MakeByte	(0X182A);
	MakeByte	(0X182B);
	MakeByte	(0X182C);
	MakeByte	(0X182D);
	MakeByte	(0X182E);
	MakeByte	(0X182F);
	MakeByte	(0X1830);
	MakeByte	(0X1831);
	MakeByte	(0X1832);
	MakeByte	(0X1833);
	MakeByte	(0X1834);
	MakeByte	(0X1835);
	MakeRptCmt	(0X1836,	"sound 17");
	MakeByte	(0X1836);
	MakeName	(0X1836,	"sfx_17");
	MakeWord	(x=0X1837);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1839);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X183B);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X183D);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X183F);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1841);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1843);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1845);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1847);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1849);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X184B);
	MakeByte	(0X184C);
	MakeByte	(0X184D);
	MakeByte	(0X184E);
	MakeByte	(0X184F);
	MakeByte	(0X1850);
	MakeByte	(0X1851);
	MakeByte	(0X1852);
	MakeByte	(0X1853);
	MakeByte	(0X1854);
	MakeByte	(0X1855);
	MakeByte	(0X1856);
	MakeByte	(0X1857);
	MakeByte	(0X1858);
	MakeRptCmt	(0X1859,	"sound 18");
	MakeByte	(0X1859);
	MakeName	(0X1859,	"sfx_18");
	MakeWord	(x=0X185A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X185C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X185E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X1860);
	MakeByte	(0X1861);
	MakeByte	(0X1862);
	MakeByte	(0X1863);
	MakeByte	(0X1864);
	MakeByte	(0X1865);
	MakeByte	(0X1866);
	MakeByte	(0X1867);
	MakeByte	(0X1868);
	MakeByte	(0X1869);
	MakeByte	(0X186A);
	MakeByte	(0X186B);
	MakeByte	(0X186C);
	MakeByte	(0X186D);
	MakeByte	(0X186E);
	MakeByte	(0X186F);
	MakeByte	(0X1870);
	MakeByte	(0X1871);
	MakeByte	(0X1872);
	MakeRptCmt	(0X1873,	"sound 19 : stairs");
	MakeByte	(0X1873);
	MakeName	(0X1873,	"sfx_19");
	MakeWord	(x=0X1874);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1876);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1878);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X187A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X187C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X187E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1880);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1882);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1884);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1886);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X1888);
	MakeByte	(0X1889);
	MakeByte	(0X188A);
	MakeByte	(0X188B);
	MakeByte	(0X188C);
	MakeByte	(0X188D);
	MakeByte	(0X188E);
	MakeByte	(0X188F);
	MakeByte	(0X1890);
	MakeByte	(0X1891);
	MakeByte	(0X1892);
	MakeRptCmt	(0X1893,	"sound 1A");
	MakeByte	(0X1893);
	MakeName	(0X1893,	"sfx_1A");
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_1(void) {
        auto x;
#define id x

	MakeWord	(x=0X1894);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1896);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1898);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X189A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X189C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X189E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X18A0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X18A2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X18A4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X18A6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X18A8);
	MakeByte	(0X18A9);
	MakeByte	(0X18AA);
	MakeByte	(0X18AB);
	MakeByte	(0X18AC);
	MakeByte	(0X18AD);
	MakeByte	(0X18AE);
	MakeByte	(0X18AF);
	MakeByte	(0X18B0);
	MakeByte	(0X18B1);
	MakeByte	(0X18B2);
	MakeByte	(0X18B3);
	MakeByte	(0X18B4);
	MakeByte	(0X18B5);
	MakeByte	(0X18B6);
	MakeByte	(0X18B7);
	MakeByte	(0X18B8);
	MakeName	(0X18B8,	"sfx_23");
	MakeWord	(x=0X18B9);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X18BB);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X18BD);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X18BF);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X18C1);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X18C3);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X18C5);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X18C7);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X18C9);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X18CB);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X18CD);
	MakeByte	(0X18CE);
	MakeByte	(0X18CF);
	MakeByte	(0X18D0);
	MakeByte	(0X18D1);
	MakeByte	(0X18D2);
	MakeByte	(0X18D3);
	MakeByte	(0X18D4);
	MakeByte	(0X18D5);
	MakeByte	(0X18D6);
	MakeByte	(0X18D7);
	MakeByte	(0X18D8);
	MakeByte	(0X18D9);
	MakeByte	(0X18DA);
	MakeByte	(0X18DB);
	MakeByte	(0X18DC);
	MakeByte	(0X18DD);
	MakeByte	(0X18DE);
	MakeName	(0X18DE,	"sfx_1B");
	MakeWord	(x=0X18DF);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X18E1);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X18E3);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X18E5);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X18E7);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X18E9);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X18EB);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X18ED);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X18EF);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X18F1);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X18F3);
	MakeByte	(0X18F4);
	MakeByte	(0X18F5);
	MakeByte	(0X18F6);
	MakeByte	(0X18F7);
	MakeByte	(0X18F8);
	MakeByte	(0X18F9);
	MakeByte	(0X18FA);
	MakeByte	(0X18FB);
	MakeByte	(0X18FC);
	MakeByte	(0X18FD);
	MakeByte	(0X18FE);
	MakeByte	(0X18FF);
	MakeByte	(0X1900);
	MakeByte	(0X1901);
	MakeByte	(0X1902);
	MakeByte	(0X1903);
	MakeByte	(0X1904);
	MakeByte	(0X1905);
	MakeByte	(0X1906);
	MakeByte	(0X1907);
	MakeByte	(0X1908);
	MakeByte	(0X1909);
	MakeName	(0X1909,	"sfx_1C");
	MakeWord	(x=0X190A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X190C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X190E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X1910);
	MakeByte	(0X1911);
	MakeByte	(0X1912);
	MakeByte	(0X1913);
	MakeByte	(0X1914);
	MakeByte	(0X1915);
	MakeByte	(0X1916);
	MakeByte	(0X1917);
	MakeByte	(0X1918);
	MakeByte	(0X1919);
	MakeByte	(0X191A);
	MakeByte	(0X191B);
	MakeByte	(0X191C);
	MakeByte	(0X191D);
	MakeByte	(0X191E);
	MakeByte	(0X191F);
	MakeByte	(0X1920);
	MakeByte	(0X1921);
	MakeByte	(0X1922);
	MakeByte	(0X1923);
	MakeByte	(0X1924);
	MakeByte	(0X1925);
	MakeByte	(0X1926);
	MakeByte	(0X1927);
	MakeByte	(0X1928);
	MakeByte	(0X1929);
	MakeByte	(0X192A);
	MakeByte	(0X192B);
	MakeByte	(0X192C);
	MakeByte	(0X192D);
	MakeRptCmt	(0X192E,	"sound 10");
	MakeByte	(0X192E);
	MakeName	(0X192E,	"sfx_10");
	MakeWord	(x=0X192F);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1931);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1933);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1935);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1937);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1939);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X193B);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X193D);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X193F);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1941);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X1943);
	MakeByte	(0X1944);
	MakeByte	(0X1945);
	MakeByte	(0X1946);
	MakeByte	(0X1947);
	MakeByte	(0X1948);
	MakeByte	(0X1949);
	MakeByte	(0X194A);
	MakeByte	(0X194B);
	MakeByte	(0X194C);
	MakeByte	(0X194D);
	MakeByte	(0X194E);
	MakeByte	(0X194F);
	MakeByte	(0X1950);
	MakeByte	(0X1951);
	MakeByte	(0X1952);
	MakeByte	(0X1953);
	MakeByte	(0X1954);
	MakeByte	(0X1955);
	MakeByte	(0X1956);
	MakeByte	(0X1957);
	MakeByte	(0X1958);
	MakeByte	(0X1959);
	MakeByte	(0X195A);
	MakeByte	(0X195B);
	MakeByte	(0X195C);
	MakeByte	(0X195D);
	MakeByte	(0X195E);
	MakeByte	(0X195F);
	MakeByte	(0X1960);
	MakeByte	(0X1961);
	MakeByte	(0X1962);
	MakeByte	(0X1963);
	MakeByte	(0X1964);
	MakeByte	(0X1965);
	MakeByte	(0X1966);
	MakeByte	(0X1967);
	MakeByte	(0X1968);
	MakeByte	(0X1969);
	MakeByte	(0X196A);
	MakeByte	(0X196B);
	MakeByte	(0X196C);
	MakeName	(0X196C,	"sfx_1D");
	MakeWord	(x=0X196D);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X196F);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1971);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X1973);
	MakeByte	(0X1974);
	MakeByte	(0X1975);
	MakeByte	(0X1976);
	MakeByte	(0X1977);
	MakeByte	(0X1978);
	MakeByte	(0X1979);
	MakeByte	(0X197A);
	MakeByte	(0X197B);
	MakeByte	(0X197C);
	MakeByte	(0X197D);
	MakeByte	(0X197E);
	MakeByte	(0X197F);
	MakeByte	(0X1980);
	MakeByte	(0X1981);
	MakeByte	(0X1982);
	MakeByte	(0X1983);
	MakeByte	(0X1984);
	MakeByte	(0X1985);
	MakeByte	(0X1986);
	MakeByte	(0X1987);
	MakeByte	(0X1988);
	MakeByte	(0X1989);
	MakeByte	(0X198A);
	MakeByte	(0X198B);
	MakeByte	(0X198C);
	MakeByte	(0X198D);
	MakeByte	(0X198E);
	MakeByte	(0X198F);
	MakeByte	(0X1990);
	MakeByte	(0X1991);
	MakeByte	(0X1992);
	MakeByte	(0X1993);
	MakeByte	(0X1994);
	MakeByte	(0X1995);
	MakeByte	(0X1996);
	MakeByte	(0X1997);
	MakeByte	(0X1998);
	MakeName	(0X1998,	"sfx_1E");
	MakeWord	(x=0X1999);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X199B);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X199D);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X199F);
	MakeByte	(0X19A0);
	MakeByte	(0X19A1);
	MakeByte	(0X19A2);
	MakeByte	(0X19A3);
	MakeByte	(0X19A4);
	MakeByte	(0X19A5);
	MakeByte	(0X19A6);
	MakeByte	(0X19A7);
	MakeByte	(0X19A8);
	MakeByte	(0X19A9);
	MakeByte	(0X19AA);
	MakeByte	(0X19AB);
	MakeByte	(0X19AC);
	MakeByte	(0X19AD);
	MakeByte	(0X19AE);
	MakeByte	(0X19AF);
	MakeByte	(0X19B0);
	MakeByte	(0X19B1);
	MakeByte	(0X19B2);
	MakeByte	(0X19B3);
	MakeByte	(0X19B4);
	MakeByte	(0X19B5);
	MakeByte	(0X19B6);
	MakeByte	(0X19B7);
	MakeByte	(0X19B8);
	MakeByte	(0X19B9);
	MakeByte	(0X19BA);
	MakeByte	(0X19BB);
	MakeByte	(0X19BC);
	MakeByte	(0X19BD);
	MakeByte	(0X19BE);
	MakeByte	(0X19BF);
	MakeByte	(0X19C0);
	MakeByte	(0X19C1);
	MakeByte	(0X19C2);
	MakeByte	(0X19C3);
	MakeByte	(0X19C4);
	MakeName	(0X19C4,	"sfx_21");
	MakeWord	(x=0X19C5);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X19C7);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X19C9);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X19CB);
	MakeByte	(0X19CC);
	MakeByte	(0X19CD);
	MakeByte	(0X19CE);
	MakeByte	(0X19CF);
	MakeByte	(0X19D0);
	MakeByte	(0X19D1);
	MakeByte	(0X19D2);
	MakeByte	(0X19D3);
	MakeByte	(0X19D4);
	MakeByte	(0X19D5);
	MakeByte	(0X19D6);
	MakeByte	(0X19D7);
	MakeByte	(0X19D8);
	MakeName	(0X19D8,	"sfx_1F");
	MakeWord	(x=0X19D9);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X19DB);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X19DD);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X19DF);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X19E1);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X19E3);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X19E5);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X19E7);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X19E9);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X19EB);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X19ED);
	MakeByte	(0X19EE);
	MakeByte	(0X19EF);
	MakeByte	(0X19F0);
	MakeByte	(0X19F1);
	MakeByte	(0X19F2);
	MakeByte	(0X19F3);
	MakeByte	(0X19F4);
	MakeByte	(0X19F5);
	MakeByte	(0X19F6);
	MakeByte	(0X19F7);
	MakeByte	(0X19F8);
	MakeByte	(0X19F9);
	MakeByte	(0X19FA);
	MakeByte	(0X19FB);
	MakeByte	(0X19FC);
	MakeByte	(0X19FD);
	MakeByte	(0X19FE);
	MakeByte	(0X19FF);
	MakeByte	(0X1A00);
	MakeByte	(0X1A01);
	MakeByte	(0X1A02);
	MakeByte	(0X1A03);
	MakeByte	(0X1A04);
	MakeByte	(0X1A05);
	MakeByte	(0X1A06);
	MakeByte	(0X1A07);
	MakeByte	(0X1A08);
	MakeName	(0X1A08,	"sfx_22");
	MakeWord	(x=0X1A09);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1A0B);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1A0D);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X1A0F);
	MakeByte	(0X1A10);
	MakeByte	(0X1A11);
	MakeByte	(0X1A12);
	MakeByte	(0X1A13);
	MakeByte	(0X1A14);
	MakeByte	(0X1A15);
	MakeByte	(0X1A16);
	MakeByte	(0X1A17);
	MakeByte	(0X1A18);
	MakeByte	(0X1A19);
	MakeByte	(0X1A1A);
	MakeByte	(0X1A1B);
	MakeByte	(0X1A1C);
	MakeByte	(0X1A1D);
	MakeByte	(0X1A1E);
	MakeName	(0X1A1E,	"sfx_24");
	MakeWord	(x=0X1A1F);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1A21);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1A23);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1A25);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1A27);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1A29);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1A2B);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1A2D);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1A2F);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1A31);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X1A33);
	MakeByte	(0X1A34);
	MakeByte	(0X1A35);
	MakeByte	(0X1A36);
	MakeByte	(0X1A37);
	MakeByte	(0X1A38);
	MakeByte	(0X1A39);
	MakeByte	(0X1A3A);
	MakeByte	(0X1A3B);
	MakeByte	(0X1A3C);
	MakeByte	(0X1A3D);
	MakeByte	(0X1A3E);
	MakeRptCmt	(0X1A3F,	"sound F");
	MakeByte	(0X1A3F);
	MakeName	(0X1A3F,	"sfx_0F");
	MakeWord	(x=0X1A40);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1A42);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1A44);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1A46);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1A48);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1A4A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1A4C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1A4E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1A50);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1A52);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X1A54);
	MakeByte	(0X1A55);
	MakeByte	(0X1A56);
	MakeByte	(0X1A57);
	MakeByte	(0X1A58);
	MakeByte	(0X1A59);
	MakeByte	(0X1A5A);
	MakeByte	(0X1A5B);
	MakeByte	(0X1A5C);
	MakeByte	(0X1A5D);
	MakeByte	(0X1A5E);
	MakeByte	(0X1A5F);
	MakeByte	(0X1A60);
	MakeByte	(0X1A61);
	MakeByte	(0X1A62);
	MakeByte	(0X1A63);
	MakeByte	(0X1A64);
	MakeByte	(0X1A65);
	MakeByte	(0X1A66);
	MakeByte	(0X1A67);
	MakeByte	(0X1A68);
	MakeName	(0X1A68,	"sfx_25");
	MakeWord	(x=0X1A69);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1A6B);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1A6D);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1A6F);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1A71);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1A73);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1A75);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1A77);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1A79);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1A7B);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X1A7D);
	MakeByte	(0X1A7E);
	MakeByte	(0X1A7F);
	MakeByte	(0X1A80);
	MakeByte	(0X1A81);
	MakeByte	(0X1A82);
	MakeByte	(0X1A83);
	MakeByte	(0X1A84);
	MakeByte	(0X1A85);
	MakeByte	(0X1A86);
	MakeByte	(0X1A87);
	MakeByte	(0X1A88);
	MakeByte	(0X1A89);
	MakeByte	(0X1A8A);
	MakeByte	(0X1A8B);
	MakeByte	(0X1A8C);
	MakeByte	(0X1A8D);
	MakeByte	(0X1A8E);
	MakeByte	(0X1A8F);
	MakeByte	(0X1A90);
	MakeByte	(0X1A91);
	MakeByte	(0X1A92);
	MakeByte	(0X1A93);
	MakeByte	(0X1A94);
	MakeByte	(0X1A95);
	MakeByte	(0X1A96);
	MakeByte	(0X1A97);
	MakeByte	(0X1A98);
	MakeByte	(0X1A99);
	MakeByte	(0X1A9A);
	MakeByte	(0X1A9B);
	MakeByte	(0X1A9C);
	MakeByte	(0X1A9D);
	MakeByte	(0X1A9E);
	MakeByte	(0X1A9F);
	MakeByte	(0X1AA0);
	MakeByte	(0X1AA1);
	MakeByte	(0X1AA2);
	MakeByte	(0X1AA3);
	MakeByte	(0X1AA4);
	MakeName	(0X1AA4,	"sfx_26");
	MakeWord	(x=0X1AA5);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1AA7);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1AA9);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1AAB);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1AAD);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1AAF);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1AB1);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1AB3);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1AB5);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1AB7);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X1AB9);
	MakeByte	(0X1ABA);
	MakeByte	(0X1ABB);
	MakeByte	(0X1ABC);
	MakeByte	(0X1ABD);
	MakeByte	(0X1ABE);
	MakeByte	(0X1ABF);
	MakeByte	(0X1AC0);
	MakeByte	(0X1AC1);
	MakeByte	(0X1AC2);
	MakeByte	(0X1AC3);
	MakeByte	(0X1AC4);
	MakeByte	(0X1AC5);
	MakeByte	(0X1AC6);
	MakeByte	(0X1AC7);
	MakeByte	(0X1AC8);
	MakeByte	(0X1AC9);
	MakeByte	(0X1ACA);
	MakeByte	(0X1ACB);
	MakeByte	(0X1ACC);
	MakeByte	(0X1ACD);
	MakeByte	(0X1ACE);
	MakeByte	(0X1ACF);
	MakeByte	(0X1AD0);
	MakeByte	(0X1AD1);
	MakeByte	(0X1AD2);
	MakeByte	(0X1AD3);
	MakeByte	(0X1AD4);
	MakeByte	(0X1AD5);
	MakeByte	(0X1AD6);
	MakeByte	(0X1AD7);
	MakeByte	(0X1AD8);
	MakeByte	(0X1AD9);
	MakeByte	(0X1ADA);
	MakeByte	(0X1ADB);
	MakeByte	(0X1ADC);
	MakeByte	(0X1ADD);
	MakeByte	(0X1ADE);
	MakeByte	(0X1ADF);
	MakeByte	(0X1AE0);
	MakeName	(0X1AE0,	"sfx_27");
	MakeWord	(x=0X1AE1);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1AE3);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1AE5);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1AE7);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1AE9);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1AEB);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1AED);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1AEF);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1AF1);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1AF3);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X1AF5);
	MakeByte	(0X1AF6);
	MakeByte	(0X1AF7);
	MakeByte	(0X1AF8);
	MakeByte	(0X1AF9);
	MakeByte	(0X1AFA);
	MakeByte	(0X1AFB);
	MakeByte	(0X1AFC);
	MakeByte	(0X1AFD);
	MakeByte	(0X1AFE);
	MakeByte	(0X1AFF);
	MakeByte	(0X1B00);
	MakeByte	(0X1B01);
	MakeByte	(0X1B02);
	MakeByte	(0X1B03);
	MakeByte	(0X1B04);
	MakeByte	(0X1B05);
	MakeByte	(0X1B06);
	MakeByte	(0X1B07);
	MakeByte	(0X1B08);
	MakeByte	(0X1B09);
	MakeByte	(0X1B0A);
	MakeByte	(0X1B0B);
	MakeByte	(0X1B0C);
	MakeByte	(0X1B0D);
	MakeByte	(0X1B0E);
	MakeByte	(0X1B0F);
	MakeByte	(0X1B10);
	MakeByte	(0X1B11);
	MakeByte	(0X1B12);
	MakeByte	(0X1B13);
	MakeByte	(0X1B14);
	MakeByte	(0X1B15);
	MakeByte	(0X1B16);
	MakeByte	(0X1B17);
	MakeByte	(0X1B18);
	MakeByte	(0X1B19);
	MakeByte	(0X1B1A);
	MakeByte	(0X1B1B);
	MakeByte	(0X1B1C);
	MakeByte	(0X1B1D);
	MakeName	(0X1B1D,	"sfx_28");
	MakeWord	(x=0X1B1E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1B20);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1B22);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1B24);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1B26);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1B28);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1B2A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1B2C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1B2E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1B30);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X1B32);
	MakeByte	(0X1B33);
	MakeByte	(0X1B34);
	MakeByte	(0X1B35);
	MakeByte	(0X1B36);
	MakeByte	(0X1B37);
	MakeByte	(0X1B38);
	MakeByte	(0X1B39);
	MakeByte	(0X1B3A);
	MakeByte	(0X1B3B);
	MakeByte	(0X1B3C);
	MakeByte	(0X1B3D);
	MakeByte	(0X1B3E);
	MakeByte	(0X1B3F);
	MakeByte	(0X1B40);
	MakeByte	(0X1B41);
	MakeByte	(0X1B42);
	MakeByte	(0X1B43);
	MakeByte	(0X1B44);
	MakeByte	(0X1B45);
	MakeByte	(0X1B46);
	MakeByte	(0X1B47);
	MakeByte	(0X1B48);
	MakeByte	(0X1B49);
	MakeByte	(0X1B4A);
	MakeByte	(0X1B4B);
	MakeByte	(0X1B4C);
	MakeByte	(0X1B4D);
	MakeByte	(0X1B4E);
	MakeByte	(0X1B4F);
	MakeByte	(0X1B50);
	MakeByte	(0X1B51);
	MakeByte	(0X1B52);
	MakeByte	(0X1B53);
	MakeByte	(0X1B54);
	MakeByte	(0X1B55);
	MakeByte	(0X1B56);
	MakeByte	(0X1B57);
	MakeByte	(0X1B58);
	MakeName	(0X1B58,	"sfx_29");
	MakeWord	(x=0X1B59);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1B5B);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1B5D);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X1B5F);
	MakeByte	(0X1B60);
	MakeByte	(0X1B61);
	MakeByte	(0X1B62);
	MakeByte	(0X1B63);
	MakeByte	(0X1B64);
	MakeByte	(0X1B65);
	MakeByte	(0X1B66);
	MakeByte	(0X1B67);
	MakeByte	(0X1B68);
	MakeByte	(0X1B69);
	MakeByte	(0X1B6A);
	MakeByte	(0X1B6B);
	MakeByte	(0X1B6C);
	MakeByte	(0X1B6D);
	MakeByte	(0X1B6E);
	MakeByte	(0X1B6F);
	MakeByte	(0X1B70);
	MakeByte	(0X1B71);
	MakeByte	(0X1B72);
	MakeByte	(0X1B73);
	MakeName	(0X1B73,	"sfx_2A");
	MakeWord	(x=0X1B74);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1B76);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1B78);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X1B7A);
	MakeByte	(0X1B7B);
	MakeByte	(0X1B7C);
	MakeByte	(0X1B7D);
	MakeByte	(0X1B7E);
	MakeByte	(0X1B7F);
	MakeByte	(0X1B80);
	MakeByte	(0X1B81);
	MakeByte	(0X1B82);
	MakeByte	(0X1B83);
	MakeByte	(0X1B84);
	MakeByte	(0X1B85);
	MakeByte	(0X1B86);
	MakeByte	(0X1B87);
	MakeByte	(0X1B88);
	MakeByte	(0X1B89);
	MakeByte	(0X1B8A);
	MakeByte	(0X1B8B);
	MakeByte	(0X1B8C);
	MakeByte	(0X1B8D);
	MakeByte	(0X1B8E);
	MakeByte	(0X1B8F);
	MakeByte	(0X1B90);
	MakeByte	(0X1B91);
	MakeByte	(0X1B92);
	MakeByte	(0X1B93);
	MakeByte	(0X1B94);
	MakeByte	(0X1B95);
	MakeByte	(0X1B96);
	MakeByte	(0X1B97);
	MakeByte	(0X1B98);
	MakeByte	(0X1B99);
	MakeByte	(0X1B9A);
	MakeByte	(0X1B9B);
	MakeByte	(0X1B9C);
	MakeByte	(0X1B9D);
	MakeByte	(0X1B9E);
	MakeByte	(0X1B9F);
	MakeByte	(0X1BA0);
	MakeByte	(0X1BA1);
	MakeByte	(0X1BA2);
	MakeByte	(0X1BA3);
	MakeByte	(0X1BA4);
	MakeName	(0X1BA4,	"sfx_31");
	MakeWord	(x=0X1BA5);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1BA7);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1BA9);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X1BAB);
	MakeByte	(0X1BAC);
	MakeByte	(0X1BAD);
	MakeByte	(0X1BAE);
	MakeByte	(0X1BAF);
	MakeByte	(0X1BB0);
	MakeByte	(0X1BB1);
	MakeByte	(0X1BB2);
	MakeByte	(0X1BB3);
	MakeByte	(0X1BB4);
	MakeByte	(0X1BB5);
	MakeByte	(0X1BB6);
	MakeByte	(0X1BB7);
	MakeByte	(0X1BB8);
	MakeByte	(0X1BB9);
	MakeByte	(0X1BBA);
	MakeByte	(0X1BBB);
	MakeByte	(0X1BBC);
	MakeByte	(0X1BBD);
	MakeByte	(0X1BBE);
	MakeByte	(0X1BBF);
	MakeByte	(0X1BC0);
	MakeByte	(0X1BC1);
	MakeByte	(0X1BC2);
	MakeByte	(0X1BC3);
	MakeByte	(0X1BC4);
	MakeByte	(0X1BC5);
	MakeByte	(0X1BC6);
	MakeByte	(0X1BC7);
	MakeByte	(0X1BC8);
	MakeByte	(0X1BC9);
	MakeByte	(0X1BCA);
	MakeByte	(0X1BCB);
	MakeByte	(0X1BCC);
	MakeByte	(0X1BCD);
	MakeByte	(0X1BCE);
	MakeByte	(0X1BCF);
	MakeByte	(0X1BD0);
	MakeByte	(0X1BD1);
	MakeByte	(0X1BD2);
	MakeByte	(0X1BD3);
	MakeByte	(0X1BD4);
	MakeByte	(0X1BD5);
	MakeByte	(0X1BD6);
	MakeByte	(0X1BD7);
	MakeByte	(0X1BD8);
	MakeByte	(0X1BD9);
	MakeByte	(0X1BDA);
	MakeByte	(0X1BDB);
	MakeByte	(0X1BDC);
	MakeByte	(0X1BDD);
	MakeName	(0X1BDD,	"sfx_20");
	MakeWord	(x=0X1BDE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1BE0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1BE2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X1BE4);
	MakeByte	(0X1BE5);
	MakeByte	(0X1BE6);
	MakeByte	(0X1BE7);
	MakeByte	(0X1BE8);
	MakeByte	(0X1BE9);
	MakeByte	(0X1BEA);
	MakeByte	(0X1BEB);
	MakeByte	(0X1BEC);
	MakeByte	(0X1BED);
	MakeByte	(0X1BEE);
	MakeByte	(0X1BEF);
	MakeByte	(0X1BF0);
	MakeByte	(0X1BF1);
	MakeByte	(0X1BF2);
	MakeByte	(0X1BF3);
	MakeByte	(0X1BF4);
	MakeByte	(0X1BF5);
	MakeByte	(0X1BF6);
	MakeByte	(0X1BF7);
	MakeByte	(0X1BF8);
	MakeByte	(0X1BF9);
	MakeByte	(0X1BFA);
	MakeByte	(0X1BFB);
	MakeByte	(0X1BFC);
	MakeByte	(0X1BFD);
	MakeByte	(0X1BFE);
	MakeByte	(0X1BFF);
	MakeByte	(0X1C00);
	MakeByte	(0X1C01);
	MakeByte	(0X1C02);
	MakeByte	(0X1C03);
	MakeByte	(0X1C04);
	MakeByte	(0X1C05);
	MakeByte	(0X1C06);
	MakeByte	(0X1C07);
	MakeByte	(0X1C08);
	MakeByte	(0X1C09);
	MakeByte	(0X1C0A);
	MakeByte	(0X1C0B);
	MakeByte	(0X1C0C);
	MakeByte	(0X1C0D);
	MakeByte	(0X1C0E);
	MakeByte	(0X1C0F);
	MakeByte	(0X1C10);
	MakeByte	(0X1C11);
	MakeByte	(0X1C12);
	MakeByte	(0X1C13);
	MakeByte	(0X1C14);
	MakeByte	(0X1C15);
	MakeByte	(0X1C16);
	MakeByte	(0X1C17);
	MakeByte	(0X1C18);
	MakeByte	(0X1C19);
	MakeByte	(0X1C1A);
	MakeByte	(0X1C1B);
	MakeByte	(0X1C1C);
	MakeByte	(0X1C1D);
	MakeByte	(0X1C1E);
	MakeByte	(0X1C1F);
	MakeByte	(0X1C20);
	MakeByte	(0X1C21);
	MakeByte	(0X1C22);
	MakeByte	(0X1C23);
	MakeByte	(0X1C24);
	MakeByte	(0X1C25);
	MakeByte	(0X1C26);
	MakeByte	(0X1C27);
	MakeByte	(0X1C28);
	MakeByte	(0X1C29);
	MakeByte	(0X1C2A);
	MakeByte	(0X1C2B);
	MakeByte	(0X1C2C);
	MakeByte	(0X1C2D);
	MakeByte	(0X1C2E);
	MakeByte	(0X1C2F);
	MakeByte	(0X1C30);
	MakeByte	(0X1C31);
	MakeByte	(0X1C32);
	MakeByte	(0X1C33);
	MakeByte	(0X1C34);
	MakeByte	(0X1C35);
	MakeByte	(0X1C36);
	MakeByte	(0X1C37);
	MakeByte	(0X1C38);
	MakeByte	(0X1C39);
	MakeByte	(0X1C3A);
	MakeByte	(0X1C3B);
	MakeByte	(0X1C3C);
	MakeByte	(0X1C3D);
	MakeByte	(0X1C3E);
	MakeByte	(0X1C3F);
	MakeByte	(0X1C40);
	MakeByte	(0X1C41);
	MakeByte	(0X1C42);
	MakeName	(0X1C42,	"sfx_2C");
	MakeWord	(x=0X1C43);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1C45);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1C47);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X1C49);
	MakeByte	(0X1C4A);
	MakeByte	(0X1C4B);
	MakeByte	(0X1C4C);
	MakeByte	(0X1C4D);
	MakeByte	(0X1C4E);
	MakeByte	(0X1C4F);
	MakeByte	(0X1C50);
	MakeByte	(0X1C51);
	MakeByte	(0X1C52);
	MakeByte	(0X1C53);
	MakeByte	(0X1C54);
	MakeByte	(0X1C55);
	MakeByte	(0X1C56);
	MakeByte	(0X1C57);
	MakeByte	(0X1C58);
	MakeByte	(0X1C59);
	MakeByte	(0X1C5A);
	MakeByte	(0X1C5B);
	MakeByte	(0X1C5C);
	MakeByte	(0X1C5D);
	MakeByte	(0X1C5E);
	MakeByte	(0X1C5F);
	MakeByte	(0X1C60);
	MakeByte	(0X1C61);
	MakeByte	(0X1C62);
	MakeByte	(0X1C63);
	MakeByte	(0X1C64);
	MakeByte	(0X1C65);
	MakeByte	(0X1C66);
	MakeByte	(0X1C67);
	MakeByte	(0X1C68);
	MakeByte	(0X1C69);
	MakeByte	(0X1C6A);
	MakeByte	(0X1C6B);
	MakeByte	(0X1C6C);
	MakeByte	(0X1C6D);
	MakeByte	(0X1C6E);
	MakeByte	(0X1C6F);
	MakeByte	(0X1C70);
	MakeByte	(0X1C71);
	MakeByte	(0X1C72);
	MakeByte	(0X1C73);
	MakeByte	(0X1C74);
	MakeByte	(0X1C75);
	MakeByte	(0X1C76);
	MakeByte	(0X1C77);
	MakeByte	(0X1C78);
	MakeByte	(0X1C79);
	MakeByte	(0X1C7A);
	MakeByte	(0X1C7B);
	MakeByte	(0X1C7C);
	MakeByte	(0X1C7D);
	MakeByte	(0X1C7E);
	MakeByte	(0X1C7F);
	MakeByte	(0X1C80);
	MakeByte	(0X1C81);
	MakeByte	(0X1C82);
	MakeByte	(0X1C83);
	MakeByte	(0X1C84);
	MakeByte	(0X1C85);
	MakeByte	(0X1C86);
	MakeByte	(0X1C87);
	MakeByte	(0X1C88);
	MakeByte	(0X1C89);
	MakeByte	(0X1C8A);
	MakeByte	(0X1C8B);
	MakeByte	(0X1C8C);
	MakeByte	(0X1C8D);
	MakeByte	(0X1C8E);
	MakeByte	(0X1C8F);
	MakeByte	(0X1C90);
	MakeByte	(0X1C91);
	MakeByte	(0X1C92);
	MakeByte	(0X1C93);
	MakeByte	(0X1C94);
	MakeByte	(0X1C95);
	MakeByte	(0X1C96);
	MakeByte	(0X1C97);
	MakeByte	(0X1C98);
	MakeByte	(0X1C99);
	MakeByte	(0X1C9A);
	MakeByte	(0X1C9B);
	MakeByte	(0X1C9C);
	MakeByte	(0X1C9D);
	MakeByte	(0X1C9E);
	MakeByte	(0X1C9F);
	MakeByte	(0X1CA0);
	MakeByte	(0X1CA1);
	MakeByte	(0X1CA2);
	MakeByte	(0X1CA3);
	MakeByte	(0X1CA4);
	MakeByte	(0X1CA5);
	MakeByte	(0X1CA6);
	MakeByte	(0X1CA7);
	MakeByte	(0X1CA8);
	MakeByte	(0X1CA9);
	MakeByte	(0X1CAA);
	MakeByte	(0X1CAB);
	MakeByte	(0X1CAC);
	MakeByte	(0X1CAD);
	MakeByte	(0X1CAE);
	MakeByte	(0X1CAF);
	MakeByte	(0X1CB0);
	MakeByte	(0X1CB1);
	MakeByte	(0X1CB2);
	MakeByte	(0X1CB3);
	MakeByte	(0X1CB4);
	MakeByte	(0X1CB5);
	MakeByte	(0X1CB6);
	MakeByte	(0X1CB7);
	MakeByte	(0X1CB8);
	MakeByte	(0X1CB9);
	MakeByte	(0X1CBA);
	MakeByte	(0X1CBB);
	MakeByte	(0X1CBC);
	MakeByte	(0X1CBD);
	MakeByte	(0X1CBE);
	MakeByte	(0X1CBF);
	MakeByte	(0X1CC0);
	MakeByte	(0X1CC1);
	MakeByte	(0X1CC2);
	MakeByte	(0X1CC3);
	MakeByte	(0X1CC4);
	MakeByte	(0X1CC5);
	MakeByte	(0X1CC6);
	MakeByte	(0X1CC7);
	MakeByte	(0X1CC8);
	MakeByte	(0X1CC9);
	MakeByte	(0X1CCA);
	MakeByte	(0X1CCB);
	MakeByte	(0X1CCC);
	MakeByte	(0X1CCD);
	MakeByte	(0X1CCE);
	MakeByte	(0X1CCF);
	MakeByte	(0X1CD0);
	MakeByte	(0X1CD1);
	MakeByte	(0X1CD2);
	MakeByte	(0X1CD3);
	MakeByte	(0X1CD4);
	MakeName	(0X1CD4,	"sfx_33");
	MakeWord	(x=0X1CD5);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1CD7);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1CD9);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1CDB);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1CDD);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1CDF);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1CE1);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1CE3);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1CE5);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1CE7);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X1CE9);
	MakeByte	(0X1CEA);
	MakeByte	(0X1CEB);
	MakeByte	(0X1CEC);
	MakeByte	(0X1CED);
	MakeByte	(0X1CEE);
	MakeByte	(0X1CEF);
	MakeByte	(0X1CF0);
	MakeByte	(0X1CF1);
	MakeByte	(0X1CF2);
	MakeByte	(0X1CF3);
	MakeByte	(0X1CF4);
	MakeByte	(0X1CF5);
	MakeByte	(0X1CF6);
	MakeByte	(0X1CF7);
	MakeByte	(0X1CF8);
	MakeByte	(0X1CF9);
	MakeByte	(0X1CFA);
	MakeByte	(0X1CFB);
	MakeByte	(0X1CFC);
	MakeByte	(0X1CFD);
	MakeByte	(0X1CFE);
	MakeByte	(0X1CFF);
	MakeByte	(0X1D00);
	MakeByte	(0X1D01);
	MakeByte	(0X1D02);
	MakeByte	(0X1D03);
	MakeByte	(0X1D04);
	MakeByte	(0X1D05);
	MakeByte	(0X1D06);
	MakeByte	(0X1D07);
	MakeByte	(0X1D08);
	MakeName	(0X1D08,	"sfx_32");
	MakeWord	(x=0X1D09);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1D0B);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1D0D);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1D0F);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1D11);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1D13);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1D15);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1D17);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1D19);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1D1B);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X1D1D);
	MakeByte	(0X1D1E);
	MakeByte	(0X1D1F);
	MakeByte	(0X1D20);
	MakeByte	(0X1D21);
	MakeByte	(0X1D22);
	MakeByte	(0X1D23);
	MakeByte	(0X1D24);
	MakeByte	(0X1D25);
	MakeByte	(0X1D26);
	MakeByte	(0X1D27);
	MakeByte	(0X1D28);
	MakeByte	(0X1D29);
	MakeByte	(0X1D2A);
	MakeByte	(0X1D2B);
	MakeByte	(0X1D2C);
	MakeByte	(0X1D2D);
	MakeByte	(0X1D2E);
	MakeByte	(0X1D2F);
	MakeByte	(0X1D30);
	MakeByte	(0X1D31);
	MakeByte	(0X1D32);
	MakeByte	(0X1D33);
	MakeByte	(0X1D34);
	MakeByte	(0X1D35);
	MakeByte	(0X1D36);
	MakeByte	(0X1D37);
	MakeByte	(0X1D38);
	MakeByte	(0X1D39);
	MakeName	(0X1D39,	"sfx_37");
	MakeWord	(x=0X1D3A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1D3C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1D3E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X1D40);
	MakeByte	(0X1D41);
	MakeByte	(0X1D42);
	MakeByte	(0X1D43);
	MakeByte	(0X1D44);
	MakeByte	(0X1D45);
	MakeByte	(0X1D46);
	MakeByte	(0X1D47);
	MakeByte	(0X1D48);
	MakeByte	(0X1D49);
	MakeByte	(0X1D4A);
	MakeByte	(0X1D4B);
	MakeByte	(0X1D4C);
	MakeByte	(0X1D4D);
	MakeByte	(0X1D4E);
	MakeByte	(0X1D4F);
	MakeByte	(0X1D50);
	MakeByte	(0X1D51);
	MakeByte	(0X1D52);
	MakeByte	(0X1D53);
	MakeByte	(0X1D54);
	MakeByte	(0X1D55);
	MakeByte	(0X1D56);
	MakeByte	(0X1D57);
	MakeByte	(0X1D58);
	MakeByte	(0X1D59);
	MakeByte	(0X1D5A);
	MakeByte	(0X1D5B);
	MakeByte	(0X1D5C);
	MakeByte	(0X1D5D);
	MakeByte	(0X1D5E);
	MakeByte	(0X1D5F);
	MakeByte	(0X1D60);
	MakeByte	(0X1D61);
	MakeByte	(0X1D62);
	MakeByte	(0X1D63);
	MakeByte	(0X1D64);
	MakeByte	(0X1D65);
	MakeByte	(0X1D66);
	MakeByte	(0X1D67);
	MakeByte	(0X1D68);
	MakeByte	(0X1D69);
	MakeByte	(0X1D6A);
	MakeByte	(0X1D6B);
	MakeByte	(0X1D6C);
	MakeByte	(0X1D6D);
	MakeByte	(0X1D6E);
	MakeByte	(0X1D6F);
	MakeByte	(0X1D70);
	MakeByte	(0X1D71);
	MakeByte	(0X1D72);
	MakeRptCmt	(0X1D73,	"sound E");
	MakeByte	(0X1D73);
	MakeName	(0X1D73,	"sfx_0E");
	MakeWord	(x=0X1D74);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1D76);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1D78);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X1D7A);
	MakeByte	(0X1D7B);
	MakeByte	(0X1D7C);
	MakeByte	(0X1D7D);
	MakeByte	(0X1D7E);
	MakeByte	(0X1D7F);
	MakeByte	(0X1D80);
	MakeByte	(0X1D81);
	MakeByte	(0X1D82);
	MakeByte	(0X1D83);
	MakeByte	(0X1D84);
	MakeByte	(0X1D85);
	MakeByte	(0X1D86);
	MakeByte	(0X1D87);
	MakeByte	(0X1D88);
	MakeByte	(0X1D89);
	MakeByte	(0X1D8A);
	MakeByte	(0X1D8B);
	MakeByte	(0X1D8C);
	MakeByte	(0X1D8D);
	MakeByte	(0X1D8E);
	MakeByte	(0X1D8F);
	MakeByte	(0X1D90);
	MakeByte	(0X1D91);
	MakeByte	(0X1D92);
	MakeByte	(0X1D93);
	MakeByte	(0X1D94);
	MakeByte	(0X1D95);
	MakeByte	(0X1D96);
	MakeByte	(0X1D97);
	MakeName	(0X1D97,	"sfx_2D");
	MakeWord	(x=0X1D98);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1D9A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1D9C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X1D9E);
	MakeByte	(0X1D9F);
	MakeByte	(0X1DA0);
	MakeByte	(0X1DA1);
	MakeByte	(0X1DA2);
	MakeByte	(0X1DA3);
	MakeByte	(0X1DA4);
	MakeByte	(0X1DA5);
	MakeByte	(0X1DA6);
	MakeByte	(0X1DA7);
	MakeByte	(0X1DA8);
	MakeByte	(0X1DA9);
	MakeByte	(0X1DAA);
	MakeByte	(0X1DAB);
	MakeByte	(0X1DAC);
	MakeByte	(0X1DAD);
	MakeByte	(0X1DAE);
	MakeByte	(0X1DAF);
	MakeByte	(0X1DB0);
	MakeByte	(0X1DB1);
	MakeByte	(0X1DB2);
	MakeByte	(0X1DB3);
	MakeByte	(0X1DB4);
	MakeByte	(0X1DB5);
	MakeByte	(0X1DB6);
	MakeByte	(0X1DB7);
	MakeByte	(0X1DB8);
	MakeByte	(0X1DB9);
	MakeByte	(0X1DBA);
	MakeByte	(0X1DBB);
	MakeByte	(0X1DBC);
	MakeByte	(0X1DBD);
	MakeByte	(0X1DBE);
	MakeByte	(0X1DBF);
	MakeByte	(0X1DC0);
	MakeByte	(0X1DC1);
	MakeByte	(0X1DC2);
	MakeByte	(0X1DC3);
	MakeByte	(0X1DC4);
	MakeByte	(0X1DC5);
	MakeByte	(0X1DC6);
	MakeByte	(0X1DC7);
	MakeByte	(0X1DC8);
	MakeName	(0X1DC8,	"sfx_2E");
	MakeWord	(x=0X1DC9);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1DCB);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1DCD);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1DCF);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1DD1);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1DD3);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1DD5);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1DD7);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1DD9);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1DDB);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X1DDD);
	MakeByte	(0X1DDE);
	MakeByte	(0X1DDF);
	MakeByte	(0X1DE0);
	MakeByte	(0X1DE1);
	MakeByte	(0X1DE2);
	MakeByte	(0X1DE3);
	MakeByte	(0X1DE4);
	MakeByte	(0X1DE5);
	MakeByte	(0X1DE6);
	MakeByte	(0X1DE7);
	MakeByte	(0X1DE8);
	MakeByte	(0X1DE9);
	MakeByte	(0X1DEA);
	MakeByte	(0X1DEB);
	MakeByte	(0X1DEC);
	MakeByte	(0X1DED);
	MakeByte	(0X1DEE);
	MakeByte	(0X1DEF);
	MakeByte	(0X1DF0);
	MakeByte	(0X1DF1);
	MakeByte	(0X1DF2);
	MakeByte	(0X1DF3);
	MakeByte	(0X1DF4);
	MakeByte	(0X1DF5);
	MakeByte	(0X1DF6);
	MakeByte	(0X1DF7);
	MakeName	(0X1DF7,	"sfx_2F");
	MakeWord	(x=0X1DF8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1DFA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1DFC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X1DFE);
	MakeByte	(0X1DFF);
	MakeByte	(0X1E00);
	MakeByte	(0X1E01);
	MakeByte	(0X1E02);
	MakeByte	(0X1E03);
	MakeByte	(0X1E04);
	MakeByte	(0X1E05);
	MakeByte	(0X1E06);
	MakeByte	(0X1E07);
	MakeByte	(0X1E08);
	MakeByte	(0X1E09);
	MakeByte	(0X1E0A);
	MakeByte	(0X1E0B);
	MakeByte	(0X1E0C);
	MakeByte	(0X1E0D);
	MakeByte	(0X1E0E);
	MakeByte	(0X1E0F);
	MakeByte	(0X1E10);
	MakeByte	(0X1E11);
	MakeByte	(0X1E12);
	MakeByte	(0X1E13);
	MakeByte	(0X1E14);
	MakeByte	(0X1E15);
	MakeByte	(0X1E16);
	MakeByte	(0X1E17);
	MakeByte	(0X1E18);
	MakeByte	(0X1E19);
	MakeByte	(0X1E1A);
	MakeByte	(0X1E1B);
	MakeByte	(0X1E1C);
	MakeByte	(0X1E1D);
	MakeByte	(0X1E1E);
	MakeByte	(0X1E1F);
	MakeByte	(0X1E20);
	MakeByte	(0X1E21);
	MakeByte	(0X1E22);
	MakeByte	(0X1E23);
	MakeByte	(0X1E24);
	MakeByte	(0X1E25);
	MakeByte	(0X1E26);
	MakeByte	(0X1E27);
	MakeByte	(0X1E28);
	MakeByte	(0X1E29);
	MakeByte	(0X1E2A);
	MakeByte	(0X1E2B);
	MakeByte	(0X1E2C);
	MakeByte	(0X1E2D);
	MakeByte	(0X1E2E);
	MakeByte	(0X1E2F);
	MakeByte	(0X1E30);
	MakeByte	(0X1E31);
	MakeName	(0X1E31,	"sfx_30");
	MakeWord	(x=0X1E32);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1E34);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1E36);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X1E38);
	MakeByte	(0X1E39);
	MakeByte	(0X1E3A);
	MakeByte	(0X1E3B);
	MakeByte	(0X1E3C);
	MakeByte	(0X1E3D);
	MakeByte	(0X1E3E);
	MakeByte	(0X1E3F);
	MakeByte	(0X1E40);
	MakeByte	(0X1E41);
	MakeByte	(0X1E42);
	MakeByte	(0X1E43);
	MakeByte	(0X1E44);
	MakeByte	(0X1E45);
	MakeByte	(0X1E46);
	MakeByte	(0X1E47);
	MakeByte	(0X1E48);
	MakeByte	(0X1E49);
	MakeByte	(0X1E4A);
	MakeByte	(0X1E4B);
	MakeByte	(0X1E4C);
	MakeByte	(0X1E4D);
	MakeByte	(0X1E4E);
	MakeByte	(0X1E4F);
	MakeByte	(0X1E50);
	MakeByte	(0X1E51);
	MakeByte	(0X1E52);
	MakeByte	(0X1E53);
	MakeByte	(0X1E54);
	MakeByte	(0X1E55);
	MakeByte	(0X1E56);
	MakeByte	(0X1E57);
	MakeByte	(0X1E58);
	MakeByte	(0X1E59);
	MakeByte	(0X1E5A);
	MakeByte	(0X1E5B);
	MakeByte	(0X1E5C);
	MakeByte	(0X1E5D);
	MakeByte	(0X1E5E);
	MakeByte	(0X1E5F);
	MakeByte	(0X1E60);
	MakeByte	(0X1E61);
	MakeByte	(0X1E62);
	MakeByte	(0X1E63);
	MakeName	(0X1E63,	"sfx_2B");
	MakeWord	(x=0X1E64);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1E66);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1E68);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X1E6A);
	MakeByte	(0X1E6B);
	MakeByte	(0X1E6C);
	MakeByte	(0X1E6D);
	MakeByte	(0X1E6E);
	MakeByte	(0X1E6F);
	MakeByte	(0X1E70);
	MakeByte	(0X1E71);
	MakeByte	(0X1E72);
	MakeByte	(0X1E73);
	MakeByte	(0X1E74);
	MakeByte	(0X1E75);
	MakeByte	(0X1E76);
	MakeByte	(0X1E77);
	MakeByte	(0X1E78);
	MakeByte	(0X1E79);
	MakeByte	(0X1E7A);
	MakeByte	(0X1E7B);
	MakeByte	(0X1E7C);
	MakeByte	(0X1E7D);
	MakeByte	(0X1E7E);
	MakeByte	(0X1E7F);
	MakeByte	(0X1E80);
	MakeByte	(0X1E81);
	MakeByte	(0X1E82);
	MakeByte	(0X1E83);
	MakeByte	(0X1E84);
	MakeName	(0X1E84,	"sfx_36");
	MakeWord	(x=0X1E85);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1E87);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1E89);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X1E8B);
	MakeName	(0X1E8B,	"sfx_35");
	MakeWord	(x=0X1E8C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1E8E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1E90);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X1E92);
	MakeByte	(0X1E93);
	MakeByte	(0X1E94);
	MakeByte	(0X1E95);
	MakeByte	(0X1E96);
	MakeByte	(0X1E97);
	MakeByte	(0X1E98);
	MakeByte	(0X1E99);
	MakeByte	(0X1E9A);
	MakeByte	(0X1E9B);
	MakeByte	(0X1E9C);
	MakeByte	(0X1E9D);
	MakeByte	(0X1E9E);
	MakeByte	(0X1E9F);
	MakeByte	(0X1EA0);
	MakeByte	(0X1EA1);
	MakeByte	(0X1EA2);
	MakeByte	(0X1EA3);
	MakeByte	(0X1EA4);
	MakeByte	(0X1EA5);
	MakeByte	(0X1EA6);
	MakeByte	(0X1EA7);
	MakeByte	(0X1EA8);
	MakeByte	(0X1EA9);
	MakeName	(0X1EA9,	"sfx_38");
	MakeWord	(x=0X1EAA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1EAC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1EAE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1EB0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1EB2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1EB4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1EB6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1EB8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1EBA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1EBC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X1EBE);
	MakeByte	(0X1EBF);
	MakeByte	(0X1EC0);
	MakeByte	(0X1EC1);
	MakeByte	(0X1EC2);
	MakeByte	(0X1EC3);
	MakeByte	(0X1EC4);
	MakeByte	(0X1EC5);
	MakeByte	(0X1EC6);
	MakeByte	(0X1EC7);
	MakeByte	(0X1EC8);
	MakeByte	(0X1EC9);
	MakeByte	(0X1ECA);
	MakeByte	(0X1ECB);
	MakeByte	(0X1ECC);
	MakeByte	(0X1ECD);
	MakeByte	(0X1ECE);
	MakeByte	(0X1ECF);
	MakeByte	(0X1ED0);
	MakeByte	(0X1ED1);
	MakeByte	(0X1ED2);
	MakeByte	(0X1ED3);
	MakeByte	(0X1ED4);
	MakeByte	(0X1ED5);
	MakeByte	(0X1ED6);
	MakeByte	(0X1ED7);
	MakeByte	(0X1ED8);
	MakeByte	(0X1ED9);
	MakeByte	(0X1EDA);
	MakeByte	(0X1EDB);
	MakeByte	(0X1EDC);
	MakeByte	(0X1EDD);
	MakeByte	(0X1EDE);
	MakeByte	(0X1EDF);
	MakeByte	(0X1EE0);
	MakeRptCmt	(0X1EE1,	"sound 11");
	MakeByte	(0X1EE1);
	MakeName	(0X1EE1,	"sfx_11");
	MakeWord	(x=0X1EE2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1EE4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1EE6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X1EE8);
	MakeByte	(0X1EE9);
	MakeByte	(0X1EEA);
	MakeByte	(0X1EEB);
	MakeByte	(0X1EEC);
	MakeRptCmt	(0X1EED,	"sound 12");
	MakeByte	(0X1EED);
	MakeName	(0X1EED,	"sfx_12");
	MakeWord	(x=0X1EEE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1EF0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1EF2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X1EF4);
	MakeByte	(0X1EF5);
	MakeByte	(0X1EF6);
	MakeByte	(0X1EF7);
	MakeByte	(0X1EF8);
	MakeRptCmt	(0X1EF9,	"sound 13");
	MakeByte	(0X1EF9);
	MakeName	(0X1EF9,	"sfx_13");
	MakeWord	(x=0X1EFA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1EFC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1EFE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X1F00);
	MakeByte	(0X1F01);
	MakeByte	(0X1F02);
	MakeByte	(0X1F03);
	MakeByte	(0X1F04);
	MakeRptCmt	(0X1F05,	"sound 14");
	MakeByte	(0X1F05);
	MakeName	(0X1F05,	"sfx_14");
	MakeWord	(x=0X1F06);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1F08);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1F0A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X1F0C);
	MakeByte	(0X1F0D);
	MakeByte	(0X1F0E);
	MakeByte	(0X1F0F);
	MakeByte	(0X1F10);
	MakeByte	(0X1F11);
	MakeName	(0X1F11,	"sfx_34");
	MakeWord	(x=0X1F12);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1F14);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1F16);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X1F18);
	MakeByte	(0X1F19);
	MakeByte	(0X1F1A);
	MakeByte	(0X1F1B);
	MakeByte	(0X1F1C);
	MakeByte	(0X1F1D);
	MakeByte	(0X1F1E);
	MakeByte	(0X1F1F);
	MakeByte	(0X1F20);
	MakeByte	(0X1F21);
	MakeByte	(0X1F22);
	MakeWord	(x=0X1F23);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1F25);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1F27);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X1F29,	"padding $FFs");
	MakeByte	(0X1F29);
	MakeByte	(0X1F2A);
	MakeArray	(0X1F2A,	0XAE);
	MakeRptCmt	(0X1FD8,	"the stack data doesn't seem to go beyond this offset, so I guess the rest could be used for extra code/data");
	MakeByte	(0X1FD8);
	MakeByte	(0X1FD9);
	MakeArray	(0X1FD9,	0X17);
	MakeComm	(0X1FF0,	"start of the stack pointer, data goes backward");
	MakeByte	(0X1FF0);
	MakeName	(0X1FF0,	"STACK_START");
	MakeByte	(0X1FF1);
	MakeArray	(0X1FF1,	0X7);
	MakeRptCmt	(0X1FF8,	"stores the index of a new DAC sample to play");
	MakeByte	(0X1FF8);
	MakeName	(0X1FF8,	"NEW_SAMPLE_TO_LOAD");
	MakeRptCmt	(0X1FF9,	"stores the timer value to send to YM");
	MakeByte	(0X1FF9);
	MakeName	(0X1FF9,	"YM_TIMER_VALUE");
	MakeByte	(0X1FFA);
	MakeByte	(0X1FFB);
	MakeRptCmt	(0X1FFC,	"fade in parameter applied from 68k when a music is loaded. \nnibble 1 : fade in speed. \nnibble 2 : fade in start level.");
	MakeByte	(0X1FFC);
	MakeName	(0X1FFC,	"FADE_IN_PARAMETERS");
	MakeRptCmt	(0X1FFD,	"general output level for music and SFX type 1, sent from 68k");
	MakeByte	(0X1FFD);
	MakeName	(0X1FFD,	"MUSIC_LEVEL");
	MakeRptCmt	(0X1FFE,	"init at 0, never changes, just has an influence on byte 0x152E, but no actual effect. So, don't care about it !");
	MakeByte	(0X1FFE);
	MakeName	(0X1FFE,	"SFX_USELESS_BYTE_1");
	MakeRptCmt	(0X1FFF,	"new operation to process (play music/sfx, fade out ...), sent from 68k");
	MakeByte	(0X1FFF);
	MakeName	(0X1FFF,	"NEW_OPERATION");
	MakeByte	(0X4000);
	MakeName	(0X4000,	"YM1_REGISTER");
	MakeByte	(0X4001);
	MakeName	(0X4001,	"YM1_DATA");
	MakeByte	(0X4002);
	MakeName	(0X4002,	"YM2_REGISTER");
	MakeByte	(0X4003);
	MakeName	(0X4003,	"YM2_DATA");
	MakeName	(0X6000,	"BANK_REGISTER");
	MakeByte	(0X7F11);
	MakeName	(0X7F11,	"PSG_PORT");
}

static Functions_0(void) {

	MakeFunction    (0X0,0X23);
	SetFunctionFlags(0X0,0x0);
	MakeFunction    (0X23,0X5D);
	SetFunctionFlags(0X23,0x0);
	MakeFunction    (0X5D,0XB2);
	SetFunctionFlags(0X5D,0x0);
	MakeFunction    (0XB2,0XBB);
	SetFunctionFlags(0XB2,0x0);
	MakeFunction    (0XBB,0X141);
	SetFunctionFlags(0XBB,0x0);
	MakeFunction    (0X141,0X14D);
	SetFunctionFlags(0X141,0x0);
	MakeFunction    (0X14D,0X16A);
	SetFunctionFlags(0X14D,0x0);
	MakeFunction    (0X16A,0X181);
	SetFunctionFlags(0X16A,0x0);
	MakeFunction    (0X181,0X195);
	SetFunctionFlags(0X181,0x0);
	MakeFunction    (0X195,0X1C7);
	SetFunctionFlags(0X195,0x0);
	MakeFunction    (0X1C7,0X330);
	SetFunctionFlags(0X1C7,0x0);
	MakeNameEx(0X20E, "Load_Music", SN_LOCAL);
	MakeNameEx(0X24F, "Load_Music_Channels", SN_LOCAL);
	MakeNameEx(0X293, "Activate_Stereo_Outputs", SN_LOCAL);
	MakeNameEx(0X2BD, "Load_End", SN_LOCAL);
	MakeNameEx(0X2C2, "Load_SFX", SN_LOCAL);
	MakeNameEx(0X2DE, "Load_SFX_Channels", SN_LOCAL);
	MakeNameEx(0X2F3, "Load_SFX_Type_2", SN_LOCAL);
	MakeFunction    (0X330,0X35D);
	SetFunctionFlags(0X330,0x0);
	MakeFunction    (0X35D,0X416);
	SetFunctionFlags(0X35D,0x0);
	MakeFunction    (0X416,0X4E5);
	SetFunctionFlags(0X416,0x0);
	MakeFunction    (0X4E5,0X4EA);
	SetFunctionFlags(0X4E5,0x0);
	MakeFunction    (0X4EA,0X4FE);
	SetFunctionFlags(0X4EA,0x0);
	MakeFunction    (0X4FE,0X504);
	SetFunctionFlags(0X4FE,0x0);
	MakeFunction    (0X504,0X514);
	SetFunctionFlags(0X504,0x0);
	MakeFunction    (0X514,0X526);
	SetFunctionFlags(0X514,0x0);
	MakeFunction    (0X526,0X536);
	SetFunctionFlags(0X526,0x0);
	MakeFunction    (0X543,0X567);
	SetFunctionFlags(0X543,0x0);
	MakeFunction    (0X567,0X791);
	SetFunctionFlags(0X567,0x0);
	MakeFrame(0X567, 0X0, 0, 0X0);
	MakeNameEx(0X5AF, "Parsing_Start", SN_LOCAL);
	MakeNameEx(0X5E0, "YM1_Parse_At_New_Offset", SN_LOCAL);
	MakeNameEx(0X5E3, "Set_Instrument", SN_LOCAL);
	MakeNameEx(0X5F0, "Load_Note", SN_LOCAL);
	MakeNameEx(0X5FF, "Set_Slide_Or_Key_Release", SN_LOCAL);
	MakeNameEx(0X609, "Load_Vibrato", SN_LOCAL);
	MakeNameEx(0X613, "Set_Stereo", SN_LOCAL);
	MakeNameEx(0X61D, "Load_Note_Shift", SN_LOCAL);
	MakeNameEx(0X627, "Loop_Command", SN_LOCAL);
	MakeNameEx(0X631, "Theoretically_Unreachable", SN_LOCAL);
	MakeNameEx(0X698, "Command_F0", SN_LOCAL);
	MakeNameEx(0X763, "EndPart", SN_LOCAL);
	MakeFunction    (0X791,0X9F0);
	SetFunctionFlags(0X791,0x0);
	MakeNameEx(0X83B, "setInstrument", SN_LOCAL);
	MakeFunction    (0X9F0,0X9F4);
	SetFunctionFlags(0X9F0,0x0);
	MakeFunction    (0X9F7,0XA9E);
	SetFunctionFlags(0X9F7,0x0);
	MakeFunction    (0XA9E,0XAA2);
	SetFunctionFlags(0XA9E,0x0);
	MakeFunction    (0XAA5,0XB57);
	SetFunctionFlags(0XAA5,0x0);
	MakeFunction    (0XB57,0XC36);
	SetFunctionFlags(0XB57,0x0);
	MakeNameEx(0XB94, "parseByte", SN_LOCAL);
	MakeNameEx(0XBDF, "parseAtNewOffset", SN_LOCAL);
	MakeNameEx(0XBE2, "setKeyRelease", SN_LOCAL);
	MakeNameEx(0XBEC, "setStereo", SN_LOCAL);
	MakeNameEx(0XBF6, "loopCommand", SN_LOCAL);
	MakeNameEx(0XC00, "ifCommandUnidentified", SN_LOCAL);
	MakeFunction    (0XC36,0XE3B);
	SetFunctionFlags(0XC36,0x0);
	MakeNameEx(0XC88, "PSG_Parse_At_New_Offset", SN_LOCAL);
	MakeNameEx(0XCA9, "Set_Timer", SN_LOCAL);
	MakeNameEx(0XCCD, "unidentifiedCommand", SN_LOCAL);
	MakeNameEx(0XCEE, "Set_New_Note", SN_LOCAL);
	MakeNameEx(0XD4E, "Apply_Vibrato", SN_LOCAL);
	MakeNameEx(0XDD4, "PSG_Release_Key", SN_LOCAL);
	MakeNameEx(0XE09, "Transmit_Data", SN_LOCAL);
	MakeFunction    (0XE3B,0XE4B);
	SetFunctionFlags(0XE3B,0x0);
	MakeFunction    (0XE4B,0XE7B);
	SetFunctionFlags(0XE4B,0x0);
	MakeFunction    (0XE7B,0XFA3);
	SetFunctionFlags(0XE7B,0x0);
	MakeNameEx(0XEE1, "Unidentified_Command", SN_LOCAL);
	MakeNameEx(0XF6A, "Release_Key", SN_LOCAL);
	MakeNameEx(0XF98, "Transmit_Attenuation", SN_LOCAL);
	MakeFunction    (0XFA3,0XFBA);
	SetFunctionFlags(0XFA3,0x0);
	MakeFunction    (0XFBA,0XFCA);
	SetFunctionFlags(0XFBA,0x0);
	MakeFunction    (0XFCA,0XFEF);
	SetFunctionFlags(0XFCA,0x0);
	MakeFunction    (0XFEF,0X1003);
	SetFunctionFlags(0XFEF,0x0);
	MakeFunction    (0X1003,0X1016);
	SetFunctionFlags(0X1003,0x0);
	MakeFunction    (0X1016,0X101F);
	SetFunctionFlags(0X1016,0x0);
	MakeFunction    (0X101F,0X1037);
	SetFunctionFlags(0X101F,0x0);
	MakeFunction    (0X1037,0X10EE);
	SetFunctionFlags(0X1037,0x0);
	MakeFrame(0X1037, 0X0, 0, 0X0);
	MakeFunction    (0X10EE,0X10FF);
	SetFunctionFlags(0X10EE,0x0);
	MakeFunction    (0X10FF,0X110B);
	SetFunctionFlags(0X10FF,0x0);
}

//------------------------------------------------------------------------
// Information about functions

static Functions(void) {

	Functions_0();
}

//------------------------------------------------------------------------
// Information about segment registers

static SegRegs(void) {
}

//------------------------------------------------------------------------
// Call all byte feature functions:

static Bytes(void) {
	Bytes_0();
	Bytes_1();
}

// End of file.
